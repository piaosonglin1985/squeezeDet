# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hog', [dirname(__file__)])
        except ImportError:
            import _hog
            return _hog
        if fp is not None:
            try:
                _mod = imp.load_module('_hog', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hog = swig_import_helper()
    del swig_import_helper
else:
    import _hog
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



import sys as _sys
if _sys.byteorder == 'little':
    _cv_numpy_endianess = '<'
else:
    _cv_numpy_endianess = '>'

_cv_numpy_typestr_map = {}
_cv_numpy_bla = {}


_hog.CV_VERSION_MAJOR_swigconstant(_hog)
CV_VERSION_MAJOR = _hog.CV_VERSION_MAJOR

_hog.CV_VERSION_MINOR_swigconstant(_hog)
CV_VERSION_MINOR = _hog.CV_VERSION_MINOR

_hog.CV_VERSION_REVISION_swigconstant(_hog)
CV_VERSION_REVISION = _hog.CV_VERSION_REVISION

_hog.CV_VERSION_STATUS_swigconstant(_hog)
CV_VERSION_STATUS = _hog.CV_VERSION_STATUS

_hog.CV_VERSION_swigconstant(_hog)
CV_VERSION = _hog.CV_VERSION

_hog.CV_MAJOR_VERSION_swigconstant(_hog)
CV_MAJOR_VERSION = _hog.CV_MAJOR_VERSION

_hog.CV_MINOR_VERSION_swigconstant(_hog)
CV_MINOR_VERSION = _hog.CV_MINOR_VERSION

_hog.CV_SUBMINOR_VERSION_swigconstant(_hog)
CV_SUBMINOR_VERSION = _hog.CV_SUBMINOR_VERSION
class DataType_bool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_bool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_bool, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_bool_generic_type
    channels = _hog.DataType_bool_channels
    fmt = _hog.DataType_bool_fmt

    def __init__(self):
        this = _hog.new_DataType_bool()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_bool
    __del__ = lambda self: None
DataType_bool_swigregister = _hog.DataType_bool_swigregister
DataType_bool_swigregister(DataType_bool)

class DataType_uchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_uchar, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_uchar_generic_type
    channels = _hog.DataType_uchar_channels
    fmt = _hog.DataType_uchar_fmt

    def __init__(self):
        this = _hog.new_DataType_uchar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_uchar
    __del__ = lambda self: None
DataType_uchar_swigregister = _hog.DataType_uchar_swigregister
DataType_uchar_swigregister(DataType_uchar)

class DataType_schar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_schar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_schar, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_schar_generic_type
    channels = _hog.DataType_schar_channels
    fmt = _hog.DataType_schar_fmt

    def __init__(self):
        this = _hog.new_DataType_schar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_schar
    __del__ = lambda self: None
DataType_schar_swigregister = _hog.DataType_schar_swigregister
DataType_schar_swigregister(DataType_schar)

class DataType_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_char, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_char_generic_type
    channels = _hog.DataType_char_channels
    fmt = _hog.DataType_char_fmt

    def __init__(self):
        this = _hog.new_DataType_char()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_char
    __del__ = lambda self: None
DataType_char_swigregister = _hog.DataType_char_swigregister
DataType_char_swigregister(DataType_char)

class DataType_ushort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_ushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_ushort, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_ushort_generic_type
    channels = _hog.DataType_ushort_channels
    fmt = _hog.DataType_ushort_fmt

    def __init__(self):
        this = _hog.new_DataType_ushort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_ushort
    __del__ = lambda self: None
DataType_ushort_swigregister = _hog.DataType_ushort_swigregister
DataType_ushort_swigregister(DataType_ushort)

class DataType_short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_short, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_short_generic_type
    channels = _hog.DataType_short_channels
    fmt = _hog.DataType_short_fmt

    def __init__(self):
        this = _hog.new_DataType_short()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_short
    __del__ = lambda self: None
DataType_short_swigregister = _hog.DataType_short_swigregister
DataType_short_swigregister(DataType_short)

class DataType_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_int, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_int_generic_type
    channels = _hog.DataType_int_channels
    fmt = _hog.DataType_int_fmt

    def __init__(self):
        this = _hog.new_DataType_int()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_int
    __del__ = lambda self: None
DataType_int_swigregister = _hog.DataType_int_swigregister
DataType_int_swigregister(DataType_int)

class DataType_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_float, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_float_generic_type
    channels = _hog.DataType_float_channels
    fmt = _hog.DataType_float_fmt

    def __init__(self):
        this = _hog.new_DataType_float()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_float
    __del__ = lambda self: None
DataType_float_swigregister = _hog.DataType_float_swigregister
DataType_float_swigregister(DataType_float)

class DataType_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_double, name)
    __repr__ = _swig_repr
    generic_type = _hog.DataType_double_generic_type
    channels = _hog.DataType_double_channels
    fmt = _hog.DataType_double_fmt

    def __init__(self):
        this = _hog.new_DataType_double()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_DataType_double
    __del__ = lambda self: None
DataType_double_swigregister = _hog.DataType_double_swigregister
DataType_double_swigregister(DataType_double)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new_Range(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self):
        return _hog.Range_size(self)

    def empty(self):
        return _hog.Range_empty(self)
    __swig_getmethods__["all"] = lambda x: _hog.Range_all
    if _newclass:
        all = staticmethod(_hog.Range_all)
    __swig_setmethods__["start"] = _hog.Range_start_set
    __swig_getmethods__["start"] = _hog.Range_start_get
    if _newclass:
        start = _swig_property(_hog.Range_start_get, _hog.Range_start_set)
    __swig_setmethods__["end"] = _hog.Range_end_set
    __swig_getmethods__["end"] = _hog.Range_end_get
    if _newclass:
        end = _swig_property(_hog.Range_end_get, _hog.Range_end_set)
    __swig_destroy__ = _hog.delete_Range
    __del__ = lambda self: None
Range_swigregister = _hog.Range_swigregister
Range_swigregister(Range)

def Range_all():
    return _hog.Range_all()
Range_all = _hog.Range_all

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hog.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hog.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hog.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hog.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hog.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hog.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hog.SwigPyIterator_copy(self)

    def next(self):
        return _hog.SwigPyIterator_next(self)

    def __next__(self):
        return _hog.SwigPyIterator___next__(self)

    def previous(self):
        return _hog.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hog.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hog.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hog.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hog.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hog.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hog.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hog.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hog.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_array_map = {}

class Matx_AddOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_AddOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_AddOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_AddOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_AddOp
    __del__ = lambda self: None
Matx_AddOp_swigregister = _hog.Matx_AddOp_swigregister
Matx_AddOp_swigregister(Matx_AddOp)

class Matx_SubOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_SubOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_SubOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_SubOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_SubOp
    __del__ = lambda self: None
Matx_SubOp_swigregister = _hog.Matx_SubOp_swigregister
Matx_SubOp_swigregister(Matx_SubOp)

class Matx_ScaleOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_ScaleOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_ScaleOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_ScaleOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_ScaleOp
    __del__ = lambda self: None
Matx_ScaleOp_swigregister = _hog.Matx_ScaleOp_swigregister
Matx_ScaleOp_swigregister(Matx_ScaleOp)

class Matx_MulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_MulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_MulOp
    __del__ = lambda self: None
Matx_MulOp_swigregister = _hog.Matx_MulOp_swigregister
Matx_MulOp_swigregister(Matx_MulOp)

class Matx_DivOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_DivOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_DivOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_DivOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_DivOp
    __del__ = lambda self: None
Matx_DivOp_swigregister = _hog.Matx_DivOp_swigregister
Matx_DivOp_swigregister(Matx_DivOp)

class Matx_MatMulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MatMulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MatMulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_MatMulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_MatMulOp
    __del__ = lambda self: None
Matx_MatMulOp_swigregister = _hog.Matx_MatMulOp_swigregister
Matx_MatMulOp_swigregister(Matx_MatMulOp)

class Matx_TOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_TOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_TOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_Matx_TOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_Matx_TOp
    __del__ = lambda self: None
Matx_TOp_swigregister = _hog.Matx_TOp_swigregister
Matx_TOp_swigregister(Matx_TOp)

class Mat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hog.delete_Mat
    __del__ = lambda self: None

    def row(self, y):
        return _hog.Mat_row(self, y)

    def col(self, x):
        return _hog.Mat_col(self, x)

    def rowRange(self, *args):
        return _hog.Mat_rowRange(self, *args)

    def colRange(self, *args):
        return _hog.Mat_colRange(self, *args)

    def diag(self, d=0):
        return _hog.Mat_diag(self, d)

    def clone(self):
        return _hog.Mat_clone(self)

    def assignTo(self, m, type=-1):
        return _hog.Mat_assignTo(self, m, type)

    def reshape(self, *args):
        return _hog.Mat_reshape(self, *args)

    def create(self, *args):
        return _hog.Mat_create(self, *args)

    def addref(self):
        return _hog.Mat_addref(self)

    def release(self):
        return _hog.Mat_release(self)

    def deallocate(self):
        return _hog.Mat_deallocate(self)

    def copySize(self, m):
        return _hog.Mat_copySize(self, m)

    def reserve(self, sz):
        return _hog.Mat_reserve(self, sz)

    def resize(self, *args):
        return _hog.Mat_resize(self, *args)

    def push_back_(self, elem):
        return _hog.Mat_push_back_(self, elem)

    def push_back(self, m):
        return _hog.Mat_push_back(self, m)

    def pop_back(self, nelems=1):
        return _hog.Mat_pop_back(self, nelems)

    def locateROI(self, wholeSize, ofs):
        return _hog.Mat_locateROI(self, wholeSize, ofs)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog.Mat_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog.Mat___call__(self, *args)

    def isContinuous(self):
        return _hog.Mat_isContinuous(self)

    def isSubmatrix(self):
        return _hog.Mat_isSubmatrix(self)

    def elemSize(self):
        return _hog.Mat_elemSize(self)

    def elemSize1(self):
        return _hog.Mat_elemSize1(self)

    def type(self):
        return _hog.Mat_type(self)

    def depth(self):
        return _hog.Mat_depth(self)

    def channels(self):
        return _hog.Mat_channels(self)

    def step1(self, i=0):
        return _hog.Mat_step1(self, i)

    def empty(self):
        return _hog.Mat_empty(self)

    def total(self):
        return _hog.Mat_total(self)

    def checkVector(self, elemChannels, depth=-1, requireContinuous=True):
        return _hog.Mat_checkVector(self, elemChannels, depth, requireContinuous)

    def ptr(self, *args):
        return _hog.Mat_ptr(self, *args)
    MAGIC_VAL = _hog.Mat_MAGIC_VAL
    AUTO_STEP = _hog.Mat_AUTO_STEP
    CONTINUOUS_FLAG = _hog.Mat_CONTINUOUS_FLAG
    SUBMATRIX_FLAG = _hog.Mat_SUBMATRIX_FLAG
    MAGIC_MASK = _hog.Mat_MAGIC_MASK
    TYPE_MASK = _hog.Mat_TYPE_MASK
    DEPTH_MASK = _hog.Mat_DEPTH_MASK
    __swig_setmethods__["flags"] = _hog.Mat_flags_set
    __swig_getmethods__["flags"] = _hog.Mat_flags_get
    if _newclass:
        flags = _swig_property(_hog.Mat_flags_get, _hog.Mat_flags_set)
    __swig_setmethods__["dims"] = _hog.Mat_dims_set
    __swig_getmethods__["dims"] = _hog.Mat_dims_get
    if _newclass:
        dims = _swig_property(_hog.Mat_dims_get, _hog.Mat_dims_set)
    __swig_setmethods__["rows"] = _hog.Mat_rows_set
    __swig_getmethods__["rows"] = _hog.Mat_rows_get
    if _newclass:
        rows = _swig_property(_hog.Mat_rows_get, _hog.Mat_rows_set)
    __swig_setmethods__["cols"] = _hog.Mat_cols_set
    __swig_getmethods__["cols"] = _hog.Mat_cols_get
    if _newclass:
        cols = _swig_property(_hog.Mat_cols_get, _hog.Mat_cols_set)
    __swig_setmethods__["data"] = _hog.Mat_data_set
    __swig_getmethods__["data"] = _hog.Mat_data_get
    if _newclass:
        data = _swig_property(_hog.Mat_data_get, _hog.Mat_data_set)
    __swig_setmethods__["datastart"] = _hog.Mat_datastart_set
    __swig_getmethods__["datastart"] = _hog.Mat_datastart_get
    if _newclass:
        datastart = _swig_property(_hog.Mat_datastart_get, _hog.Mat_datastart_set)
    __swig_setmethods__["dataend"] = _hog.Mat_dataend_set
    __swig_getmethods__["dataend"] = _hog.Mat_dataend_get
    if _newclass:
        dataend = _swig_property(_hog.Mat_dataend_get, _hog.Mat_dataend_set)
    __swig_setmethods__["datalimit"] = _hog.Mat_datalimit_set
    __swig_getmethods__["datalimit"] = _hog.Mat_datalimit_get
    if _newclass:
        datalimit = _swig_property(_hog.Mat_datalimit_get, _hog.Mat_datalimit_set)

    def __init__(self, *args):
        this = _hog.new_Mat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _typestr(self):
        typestr = _depthToDtype(self.depth())
        if typestr[-1] == '1':
            typestr = '|' + typestr
        else:
            typestr = _cv_numpy_endianess + typestr

        return typestr


    @classmethod
    def __get_channels(cls, array):
        if len(array.shape) == 3:
            n_channel = array.shape[2]
            if n_channel == 1:
                raise ValueError("{} expects an one channel numpy ndarray be 2-dimensional.".format(cls))
        elif len(array.shape) == 2:
            n_channel = 1
        else:
            raise ValueError("{} supports only 2 or 3-dimensional numpy ndarray.".format(cls))

        return n_channel


    def __getattribute__(self, name):
        if name == "__array_interface__":
            n_channels = self.channels()
            if n_channels == 1:
                shape = (self.rows, self.cols)
            else:
                shape = (self.rows, self.cols, n_channels)

            return {"shape": shape,
                    "typestr": self._typestr(),
                    "data": (int(self.data), False)}

        else:
            return object.__getattribute__(self, name)

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        dtype = array.__array_interface__['typestr']
        dtype = dtype[1:]

        n_channel = cls.__get_channels(array)

        new_mat = Mat(array.shape[0],
                      array.shape[1],
                      _toCvType(dtype, n_channel),
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog.Mat___str__(self)
Mat_swigregister = _hog.Mat_swigregister
Mat_swigregister(Mat)

class _cv_numpy_sizeof_uint8_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_uint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_uint8_t, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_uint8_t_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_uint8_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_uint8_t
    __del__ = lambda self: None
_cv_numpy_sizeof_uint8_t_swigregister = _hog._cv_numpy_sizeof_uint8_t_swigregister
_cv_numpy_sizeof_uint8_t_swigregister(_cv_numpy_sizeof_uint8_t)


if _cv_numpy_sizeof_uint8_t.value == 1:
    _cv_numpy_typestr_map["uint8_t"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["uint8_t"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_uint8_t.value)

class _uint8_tArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _uint8_tArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _uint8_tArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._uint8_tArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._uint8_tArray___nonzero__(self)

    def __bool__(self):
        return _hog._uint8_tArray___bool__(self)

    def __len__(self):
        return _hog._uint8_tArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._uint8_tArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._uint8_tArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._uint8_tArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._uint8_tArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._uint8_tArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._uint8_tArray___setitem__(self, *args)

    def pop(self):
        return _hog._uint8_tArray_pop(self)

    def append(self, x):
        return _hog._uint8_tArray_append(self, x)

    def empty(self):
        return _hog._uint8_tArray_empty(self)

    def size(self):
        return _hog._uint8_tArray_size(self)

    def swap(self, v):
        return _hog._uint8_tArray_swap(self, v)

    def begin(self):
        return _hog._uint8_tArray_begin(self)

    def end(self):
        return _hog._uint8_tArray_end(self)

    def rbegin(self):
        return _hog._uint8_tArray_rbegin(self)

    def rend(self):
        return _hog._uint8_tArray_rend(self)

    def clear(self):
        return _hog._uint8_tArray_clear(self)

    def get_allocator(self):
        return _hog._uint8_tArray_get_allocator(self)

    def pop_back(self):
        return _hog._uint8_tArray_pop_back(self)

    def erase(self, *args):
        return _hog._uint8_tArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__uint8_tArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._uint8_tArray_push_back(self, x)

    def front(self):
        return _hog._uint8_tArray_front(self)

    def back(self):
        return _hog._uint8_tArray_back(self)

    def assign(self, n, x):
        return _hog._uint8_tArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._uint8_tArray_resize(self, *args)

    def insert(self, *args):
        return _hog._uint8_tArray_insert(self, *args)

    def reserve(self, n):
        return _hog._uint8_tArray_reserve(self, n)

    def capacity(self):
        return _hog._uint8_tArray_capacity(self)
    __swig_destroy__ = _hog.delete__uint8_tArray
    __del__ = lambda self: None
_uint8_tArray_swigregister = _hog._uint8_tArray_swigregister
_uint8_tArray_swigregister(_uint8_tArray)


_array_map["uint8_t"] = _uint8_tArray

class _Matx_uint8_t_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_uint8_t_2_1_rows
    cols = _hog._Matx_uint8_t_2_1_cols
    channels = _hog._Matx_uint8_t_2_1_channels
    shortdim = _hog._Matx_uint8_t_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_uint8_t_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_uint8_t_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_uint8_t_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_uint8_t_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_uint8_t_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_uint8_t_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_uint8_t_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_uint8_t_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_uint8_t_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_uint8_t_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_uint8_t_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_uint8_t_2_1_randn)

    def dot(self, v):
        return _hog._Matx_uint8_t_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_uint8_t_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_uint8_t_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_uint8_t_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_uint8_t_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_uint8_t_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_uint8_t_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_uint8_t_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_uint8_t_2_1_val_get, _hog._Matx_uint8_t_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_uint8_t_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_uint8_t_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_uint8_t_2_1
    __del__ = lambda self: None
_Matx_uint8_t_2_1_swigregister = _hog._Matx_uint8_t_2_1_swigregister
_Matx_uint8_t_2_1_swigregister(_Matx_uint8_t_2_1)

def _Matx_uint8_t_2_1_all(alpha):
    return _hog._Matx_uint8_t_2_1_all(alpha)
_Matx_uint8_t_2_1_all = _hog._Matx_uint8_t_2_1_all

def _Matx_uint8_t_2_1_zeros():
    return _hog._Matx_uint8_t_2_1_zeros()
_Matx_uint8_t_2_1_zeros = _hog._Matx_uint8_t_2_1_zeros

def _Matx_uint8_t_2_1_ones():
    return _hog._Matx_uint8_t_2_1_ones()
_Matx_uint8_t_2_1_ones = _hog._Matx_uint8_t_2_1_ones

def _Matx_uint8_t_2_1_eye():
    return _hog._Matx_uint8_t_2_1_eye()
_Matx_uint8_t_2_1_eye = _hog._Matx_uint8_t_2_1_eye

def _Matx_uint8_t_2_1_randu(a, b):
    return _hog._Matx_uint8_t_2_1_randu(a, b)
_Matx_uint8_t_2_1_randu = _hog._Matx_uint8_t_2_1_randu

def _Matx_uint8_t_2_1_randn(a, b):
    return _hog._Matx_uint8_t_2_1_randn(a, b)
_Matx_uint8_t_2_1_randn = _hog._Matx_uint8_t_2_1_randn


Matx21b = _Matx_uint8_t_2_1

class _Vec_uint8_t_2(_Matx_uint8_t_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_uint8_t_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_uint8_t_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_uint8_t_2_all)

    def mul(self, v):
        return _hog._Vec_uint8_t_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_uint8_t_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_uint8_t_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_uint8_t_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_uint8_t_2
    __del__ = lambda self: None
_Vec_uint8_t_2_swigregister = _hog._Vec_uint8_t_2_swigregister
_Vec_uint8_t_2_swigregister(_Vec_uint8_t_2)

def _Vec_uint8_t_2_all(alpha):
    return _hog._Vec_uint8_t_2_all(alpha)
_Vec_uint8_t_2_all = _hog._Vec_uint8_t_2_all

class _DataType_Vec_uint8_t_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_uint8_t_2_generic_type
    channels = _hog._DataType_Vec_uint8_t_2_channels
    fmt = _hog._DataType_Vec_uint8_t_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_uint8_t_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_uint8_t_2
    __del__ = lambda self: None
_DataType_Vec_uint8_t_2_swigregister = _hog._DataType_Vec_uint8_t_2_swigregister
_DataType_Vec_uint8_t_2_swigregister(_DataType_Vec_uint8_t_2)


Vec2b = _Vec_uint8_t_2
DataType_Vec2b = _DataType_Vec_uint8_t_2

class _Matx_uint8_t_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_uint8_t_3_1_rows
    cols = _hog._Matx_uint8_t_3_1_cols
    channels = _hog._Matx_uint8_t_3_1_channels
    shortdim = _hog._Matx_uint8_t_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_uint8_t_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_uint8_t_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_uint8_t_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_uint8_t_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_uint8_t_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_uint8_t_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_uint8_t_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_uint8_t_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_uint8_t_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_uint8_t_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_uint8_t_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_uint8_t_3_1_randn)

    def dot(self, v):
        return _hog._Matx_uint8_t_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_uint8_t_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_uint8_t_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_uint8_t_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_uint8_t_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_uint8_t_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_uint8_t_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_uint8_t_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_uint8_t_3_1_val_get, _hog._Matx_uint8_t_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_uint8_t_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_uint8_t_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_uint8_t_3_1
    __del__ = lambda self: None
_Matx_uint8_t_3_1_swigregister = _hog._Matx_uint8_t_3_1_swigregister
_Matx_uint8_t_3_1_swigregister(_Matx_uint8_t_3_1)

def _Matx_uint8_t_3_1_all(alpha):
    return _hog._Matx_uint8_t_3_1_all(alpha)
_Matx_uint8_t_3_1_all = _hog._Matx_uint8_t_3_1_all

def _Matx_uint8_t_3_1_zeros():
    return _hog._Matx_uint8_t_3_1_zeros()
_Matx_uint8_t_3_1_zeros = _hog._Matx_uint8_t_3_1_zeros

def _Matx_uint8_t_3_1_ones():
    return _hog._Matx_uint8_t_3_1_ones()
_Matx_uint8_t_3_1_ones = _hog._Matx_uint8_t_3_1_ones

def _Matx_uint8_t_3_1_eye():
    return _hog._Matx_uint8_t_3_1_eye()
_Matx_uint8_t_3_1_eye = _hog._Matx_uint8_t_3_1_eye

def _Matx_uint8_t_3_1_randu(a, b):
    return _hog._Matx_uint8_t_3_1_randu(a, b)
_Matx_uint8_t_3_1_randu = _hog._Matx_uint8_t_3_1_randu

def _Matx_uint8_t_3_1_randn(a, b):
    return _hog._Matx_uint8_t_3_1_randn(a, b)
_Matx_uint8_t_3_1_randn = _hog._Matx_uint8_t_3_1_randn


Matx31b = _Matx_uint8_t_3_1

class _Vec_uint8_t_3(_Matx_uint8_t_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_uint8_t_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_uint8_t_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_uint8_t_3_all)

    def mul(self, v):
        return _hog._Vec_uint8_t_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_uint8_t_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_uint8_t_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_uint8_t_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_uint8_t_3
    __del__ = lambda self: None
_Vec_uint8_t_3_swigregister = _hog._Vec_uint8_t_3_swigregister
_Vec_uint8_t_3_swigregister(_Vec_uint8_t_3)

def _Vec_uint8_t_3_all(alpha):
    return _hog._Vec_uint8_t_3_all(alpha)
_Vec_uint8_t_3_all = _hog._Vec_uint8_t_3_all

class _DataType_Vec_uint8_t_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_uint8_t_3_generic_type
    channels = _hog._DataType_Vec_uint8_t_3_channels
    fmt = _hog._DataType_Vec_uint8_t_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_uint8_t_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_uint8_t_3
    __del__ = lambda self: None
_DataType_Vec_uint8_t_3_swigregister = _hog._DataType_Vec_uint8_t_3_swigregister
_DataType_Vec_uint8_t_3_swigregister(_DataType_Vec_uint8_t_3)


Vec3b = _Vec_uint8_t_3
DataType_Vec3b = _DataType_Vec_uint8_t_3

class _Matx_uint8_t_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_uint8_t_4_1_rows
    cols = _hog._Matx_uint8_t_4_1_cols
    channels = _hog._Matx_uint8_t_4_1_channels
    shortdim = _hog._Matx_uint8_t_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_uint8_t_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_uint8_t_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_uint8_t_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_uint8_t_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_uint8_t_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_uint8_t_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_uint8_t_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_uint8_t_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_uint8_t_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_uint8_t_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_uint8_t_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_uint8_t_4_1_randn)

    def dot(self, v):
        return _hog._Matx_uint8_t_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_uint8_t_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_uint8_t_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_uint8_t_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_uint8_t_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_uint8_t_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_uint8_t_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_uint8_t_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_uint8_t_4_1_val_get, _hog._Matx_uint8_t_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_uint8_t_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_uint8_t_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_uint8_t_4_1
    __del__ = lambda self: None
_Matx_uint8_t_4_1_swigregister = _hog._Matx_uint8_t_4_1_swigregister
_Matx_uint8_t_4_1_swigregister(_Matx_uint8_t_4_1)

def _Matx_uint8_t_4_1_all(alpha):
    return _hog._Matx_uint8_t_4_1_all(alpha)
_Matx_uint8_t_4_1_all = _hog._Matx_uint8_t_4_1_all

def _Matx_uint8_t_4_1_zeros():
    return _hog._Matx_uint8_t_4_1_zeros()
_Matx_uint8_t_4_1_zeros = _hog._Matx_uint8_t_4_1_zeros

def _Matx_uint8_t_4_1_ones():
    return _hog._Matx_uint8_t_4_1_ones()
_Matx_uint8_t_4_1_ones = _hog._Matx_uint8_t_4_1_ones

def _Matx_uint8_t_4_1_eye():
    return _hog._Matx_uint8_t_4_1_eye()
_Matx_uint8_t_4_1_eye = _hog._Matx_uint8_t_4_1_eye

def _Matx_uint8_t_4_1_randu(a, b):
    return _hog._Matx_uint8_t_4_1_randu(a, b)
_Matx_uint8_t_4_1_randu = _hog._Matx_uint8_t_4_1_randu

def _Matx_uint8_t_4_1_randn(a, b):
    return _hog._Matx_uint8_t_4_1_randn(a, b)
_Matx_uint8_t_4_1_randn = _hog._Matx_uint8_t_4_1_randn


Matx41b = _Matx_uint8_t_4_1

class _Vec_uint8_t_4(_Matx_uint8_t_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_uint8_t_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_uint8_t_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_uint8_t_4_all)

    def mul(self, v):
        return _hog._Vec_uint8_t_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_uint8_t_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_uint8_t_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_uint8_t_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_uint8_t_4
    __del__ = lambda self: None
_Vec_uint8_t_4_swigregister = _hog._Vec_uint8_t_4_swigregister
_Vec_uint8_t_4_swigregister(_Vec_uint8_t_4)

def _Vec_uint8_t_4_all(alpha):
    return _hog._Vec_uint8_t_4_all(alpha)
_Vec_uint8_t_4_all = _hog._Vec_uint8_t_4_all

class _DataType_Vec_uint8_t_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_uint8_t_4_generic_type
    channels = _hog._DataType_Vec_uint8_t_4_channels
    fmt = _hog._DataType_Vec_uint8_t_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_uint8_t_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_uint8_t_4
    __del__ = lambda self: None
_DataType_Vec_uint8_t_4_swigregister = _hog._DataType_Vec_uint8_t_4_swigregister
_DataType_Vec_uint8_t_4_swigregister(_DataType_Vec_uint8_t_4)


Vec4b = _Vec_uint8_t_4
DataType_Vec4b = _DataType_Vec_uint8_t_4

class _cv_numpy_sizeof_short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_short, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_short_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_short()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_short
    __del__ = lambda self: None
_cv_numpy_sizeof_short_swigregister = _hog._cv_numpy_sizeof_short_swigregister
_cv_numpy_sizeof_short_swigregister(_cv_numpy_sizeof_short)


if _cv_numpy_sizeof_short.value == 1:
    _cv_numpy_typestr_map["short"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["short"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_short.value)

class _shortArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _shortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _shortArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._shortArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._shortArray___nonzero__(self)

    def __bool__(self):
        return _hog._shortArray___bool__(self)

    def __len__(self):
        return _hog._shortArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._shortArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._shortArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._shortArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._shortArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._shortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._shortArray___setitem__(self, *args)

    def pop(self):
        return _hog._shortArray_pop(self)

    def append(self, x):
        return _hog._shortArray_append(self, x)

    def empty(self):
        return _hog._shortArray_empty(self)

    def size(self):
        return _hog._shortArray_size(self)

    def swap(self, v):
        return _hog._shortArray_swap(self, v)

    def begin(self):
        return _hog._shortArray_begin(self)

    def end(self):
        return _hog._shortArray_end(self)

    def rbegin(self):
        return _hog._shortArray_rbegin(self)

    def rend(self):
        return _hog._shortArray_rend(self)

    def clear(self):
        return _hog._shortArray_clear(self)

    def get_allocator(self):
        return _hog._shortArray_get_allocator(self)

    def pop_back(self):
        return _hog._shortArray_pop_back(self)

    def erase(self, *args):
        return _hog._shortArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__shortArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._shortArray_push_back(self, x)

    def front(self):
        return _hog._shortArray_front(self)

    def back(self):
        return _hog._shortArray_back(self)

    def assign(self, n, x):
        return _hog._shortArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._shortArray_resize(self, *args)

    def insert(self, *args):
        return _hog._shortArray_insert(self, *args)

    def reserve(self, n):
        return _hog._shortArray_reserve(self, n)

    def capacity(self):
        return _hog._shortArray_capacity(self)
    __swig_destroy__ = _hog.delete__shortArray
    __del__ = lambda self: None
_shortArray_swigregister = _hog._shortArray_swigregister
_shortArray_swigregister(_shortArray)


_array_map["short"] = _shortArray

class _Matx_short_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_short_2_1_rows
    cols = _hog._Matx_short_2_1_cols
    channels = _hog._Matx_short_2_1_channels
    shortdim = _hog._Matx_short_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_short_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_short_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_short_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_short_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_short_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_short_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_short_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_short_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_short_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_short_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_short_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_short_2_1_randn)

    def dot(self, v):
        return _hog._Matx_short_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_short_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_short_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_short_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_short_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_short_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_short_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_short_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_short_2_1_val_get, _hog._Matx_short_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_short_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_short_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_short_2_1
    __del__ = lambda self: None
_Matx_short_2_1_swigregister = _hog._Matx_short_2_1_swigregister
_Matx_short_2_1_swigregister(_Matx_short_2_1)

def _Matx_short_2_1_all(alpha):
    return _hog._Matx_short_2_1_all(alpha)
_Matx_short_2_1_all = _hog._Matx_short_2_1_all

def _Matx_short_2_1_zeros():
    return _hog._Matx_short_2_1_zeros()
_Matx_short_2_1_zeros = _hog._Matx_short_2_1_zeros

def _Matx_short_2_1_ones():
    return _hog._Matx_short_2_1_ones()
_Matx_short_2_1_ones = _hog._Matx_short_2_1_ones

def _Matx_short_2_1_eye():
    return _hog._Matx_short_2_1_eye()
_Matx_short_2_1_eye = _hog._Matx_short_2_1_eye

def _Matx_short_2_1_randu(a, b):
    return _hog._Matx_short_2_1_randu(a, b)
_Matx_short_2_1_randu = _hog._Matx_short_2_1_randu

def _Matx_short_2_1_randn(a, b):
    return _hog._Matx_short_2_1_randn(a, b)
_Matx_short_2_1_randn = _hog._Matx_short_2_1_randn


Matx21s = _Matx_short_2_1

class _Vec_short_2(_Matx_short_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_short_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_short_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_short_2_all)

    def mul(self, v):
        return _hog._Vec_short_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_short_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_short_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_short_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_short_2
    __del__ = lambda self: None
_Vec_short_2_swigregister = _hog._Vec_short_2_swigregister
_Vec_short_2_swigregister(_Vec_short_2)

def _Vec_short_2_all(alpha):
    return _hog._Vec_short_2_all(alpha)
_Vec_short_2_all = _hog._Vec_short_2_all

class _DataType_Vec_short_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_short_2_generic_type
    channels = _hog._DataType_Vec_short_2_channels
    fmt = _hog._DataType_Vec_short_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_short_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_short_2
    __del__ = lambda self: None
_DataType_Vec_short_2_swigregister = _hog._DataType_Vec_short_2_swigregister
_DataType_Vec_short_2_swigregister(_DataType_Vec_short_2)


Vec2s = _Vec_short_2
DataType_Vec2s = _DataType_Vec_short_2

class _Matx_short_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_short_3_1_rows
    cols = _hog._Matx_short_3_1_cols
    channels = _hog._Matx_short_3_1_channels
    shortdim = _hog._Matx_short_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_short_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_short_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_short_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_short_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_short_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_short_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_short_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_short_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_short_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_short_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_short_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_short_3_1_randn)

    def dot(self, v):
        return _hog._Matx_short_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_short_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_short_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_short_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_short_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_short_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_short_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_short_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_short_3_1_val_get, _hog._Matx_short_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_short_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_short_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_short_3_1
    __del__ = lambda self: None
_Matx_short_3_1_swigregister = _hog._Matx_short_3_1_swigregister
_Matx_short_3_1_swigregister(_Matx_short_3_1)

def _Matx_short_3_1_all(alpha):
    return _hog._Matx_short_3_1_all(alpha)
_Matx_short_3_1_all = _hog._Matx_short_3_1_all

def _Matx_short_3_1_zeros():
    return _hog._Matx_short_3_1_zeros()
_Matx_short_3_1_zeros = _hog._Matx_short_3_1_zeros

def _Matx_short_3_1_ones():
    return _hog._Matx_short_3_1_ones()
_Matx_short_3_1_ones = _hog._Matx_short_3_1_ones

def _Matx_short_3_1_eye():
    return _hog._Matx_short_3_1_eye()
_Matx_short_3_1_eye = _hog._Matx_short_3_1_eye

def _Matx_short_3_1_randu(a, b):
    return _hog._Matx_short_3_1_randu(a, b)
_Matx_short_3_1_randu = _hog._Matx_short_3_1_randu

def _Matx_short_3_1_randn(a, b):
    return _hog._Matx_short_3_1_randn(a, b)
_Matx_short_3_1_randn = _hog._Matx_short_3_1_randn


Matx31s = _Matx_short_3_1

class _Vec_short_3(_Matx_short_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_short_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_short_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_short_3_all)

    def mul(self, v):
        return _hog._Vec_short_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_short_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_short_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_short_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_short_3
    __del__ = lambda self: None
_Vec_short_3_swigregister = _hog._Vec_short_3_swigregister
_Vec_short_3_swigregister(_Vec_short_3)

def _Vec_short_3_all(alpha):
    return _hog._Vec_short_3_all(alpha)
_Vec_short_3_all = _hog._Vec_short_3_all

class _DataType_Vec_short_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_short_3_generic_type
    channels = _hog._DataType_Vec_short_3_channels
    fmt = _hog._DataType_Vec_short_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_short_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_short_3
    __del__ = lambda self: None
_DataType_Vec_short_3_swigregister = _hog._DataType_Vec_short_3_swigregister
_DataType_Vec_short_3_swigregister(_DataType_Vec_short_3)


Vec3s = _Vec_short_3
DataType_Vec3s = _DataType_Vec_short_3

class _Matx_short_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_short_4_1_rows
    cols = _hog._Matx_short_4_1_cols
    channels = _hog._Matx_short_4_1_channels
    shortdim = _hog._Matx_short_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_short_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_short_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_short_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_short_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_short_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_short_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_short_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_short_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_short_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_short_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_short_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_short_4_1_randn)

    def dot(self, v):
        return _hog._Matx_short_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_short_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_short_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_short_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_short_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_short_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_short_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_short_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_short_4_1_val_get, _hog._Matx_short_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_short_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_short_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_short_4_1
    __del__ = lambda self: None
_Matx_short_4_1_swigregister = _hog._Matx_short_4_1_swigregister
_Matx_short_4_1_swigregister(_Matx_short_4_1)

def _Matx_short_4_1_all(alpha):
    return _hog._Matx_short_4_1_all(alpha)
_Matx_short_4_1_all = _hog._Matx_short_4_1_all

def _Matx_short_4_1_zeros():
    return _hog._Matx_short_4_1_zeros()
_Matx_short_4_1_zeros = _hog._Matx_short_4_1_zeros

def _Matx_short_4_1_ones():
    return _hog._Matx_short_4_1_ones()
_Matx_short_4_1_ones = _hog._Matx_short_4_1_ones

def _Matx_short_4_1_eye():
    return _hog._Matx_short_4_1_eye()
_Matx_short_4_1_eye = _hog._Matx_short_4_1_eye

def _Matx_short_4_1_randu(a, b):
    return _hog._Matx_short_4_1_randu(a, b)
_Matx_short_4_1_randu = _hog._Matx_short_4_1_randu

def _Matx_short_4_1_randn(a, b):
    return _hog._Matx_short_4_1_randn(a, b)
_Matx_short_4_1_randn = _hog._Matx_short_4_1_randn


Matx41s = _Matx_short_4_1

class _Vec_short_4(_Matx_short_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_short_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_short_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_short_4_all)

    def mul(self, v):
        return _hog._Vec_short_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_short_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_short_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_short_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_short_4
    __del__ = lambda self: None
_Vec_short_4_swigregister = _hog._Vec_short_4_swigregister
_Vec_short_4_swigregister(_Vec_short_4)

def _Vec_short_4_all(alpha):
    return _hog._Vec_short_4_all(alpha)
_Vec_short_4_all = _hog._Vec_short_4_all

class _DataType_Vec_short_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_short_4_generic_type
    channels = _hog._DataType_Vec_short_4_channels
    fmt = _hog._DataType_Vec_short_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_short_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_short_4
    __del__ = lambda self: None
_DataType_Vec_short_4_swigregister = _hog._DataType_Vec_short_4_swigregister
_DataType_Vec_short_4_swigregister(_DataType_Vec_short_4)


Vec4s = _Vec_short_4
DataType_Vec4s = _DataType_Vec_short_4

class _cv_numpy_sizeof_ushort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_ushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_ushort, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_ushort_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_ushort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_ushort
    __del__ = lambda self: None
_cv_numpy_sizeof_ushort_swigregister = _hog._cv_numpy_sizeof_ushort_swigregister
_cv_numpy_sizeof_ushort_swigregister(_cv_numpy_sizeof_ushort)


if _cv_numpy_sizeof_ushort.value == 1:
    _cv_numpy_typestr_map["ushort"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["ushort"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_ushort.value)

class _ushortArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ushortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _ushortArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._ushortArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._ushortArray___nonzero__(self)

    def __bool__(self):
        return _hog._ushortArray___bool__(self)

    def __len__(self):
        return _hog._ushortArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._ushortArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._ushortArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._ushortArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._ushortArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._ushortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._ushortArray___setitem__(self, *args)

    def pop(self):
        return _hog._ushortArray_pop(self)

    def append(self, x):
        return _hog._ushortArray_append(self, x)

    def empty(self):
        return _hog._ushortArray_empty(self)

    def size(self):
        return _hog._ushortArray_size(self)

    def swap(self, v):
        return _hog._ushortArray_swap(self, v)

    def begin(self):
        return _hog._ushortArray_begin(self)

    def end(self):
        return _hog._ushortArray_end(self)

    def rbegin(self):
        return _hog._ushortArray_rbegin(self)

    def rend(self):
        return _hog._ushortArray_rend(self)

    def clear(self):
        return _hog._ushortArray_clear(self)

    def get_allocator(self):
        return _hog._ushortArray_get_allocator(self)

    def pop_back(self):
        return _hog._ushortArray_pop_back(self)

    def erase(self, *args):
        return _hog._ushortArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__ushortArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._ushortArray_push_back(self, x)

    def front(self):
        return _hog._ushortArray_front(self)

    def back(self):
        return _hog._ushortArray_back(self)

    def assign(self, n, x):
        return _hog._ushortArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._ushortArray_resize(self, *args)

    def insert(self, *args):
        return _hog._ushortArray_insert(self, *args)

    def reserve(self, n):
        return _hog._ushortArray_reserve(self, n)

    def capacity(self):
        return _hog._ushortArray_capacity(self)
    __swig_destroy__ = _hog.delete__ushortArray
    __del__ = lambda self: None
_ushortArray_swigregister = _hog._ushortArray_swigregister
_ushortArray_swigregister(_ushortArray)


_array_map["ushort"] = _ushortArray

class _Matx_ushort_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_ushort_2_1_rows
    cols = _hog._Matx_ushort_2_1_cols
    channels = _hog._Matx_ushort_2_1_channels
    shortdim = _hog._Matx_ushort_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_ushort_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_ushort_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_ushort_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_ushort_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_ushort_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_ushort_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_ushort_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_ushort_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_ushort_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_ushort_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_ushort_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_ushort_2_1_randn)

    def dot(self, v):
        return _hog._Matx_ushort_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_ushort_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_ushort_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_ushort_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_ushort_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_ushort_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_ushort_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_ushort_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_ushort_2_1_val_get, _hog._Matx_ushort_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_ushort_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_ushort_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_ushort_2_1
    __del__ = lambda self: None
_Matx_ushort_2_1_swigregister = _hog._Matx_ushort_2_1_swigregister
_Matx_ushort_2_1_swigregister(_Matx_ushort_2_1)

def _Matx_ushort_2_1_all(alpha):
    return _hog._Matx_ushort_2_1_all(alpha)
_Matx_ushort_2_1_all = _hog._Matx_ushort_2_1_all

def _Matx_ushort_2_1_zeros():
    return _hog._Matx_ushort_2_1_zeros()
_Matx_ushort_2_1_zeros = _hog._Matx_ushort_2_1_zeros

def _Matx_ushort_2_1_ones():
    return _hog._Matx_ushort_2_1_ones()
_Matx_ushort_2_1_ones = _hog._Matx_ushort_2_1_ones

def _Matx_ushort_2_1_eye():
    return _hog._Matx_ushort_2_1_eye()
_Matx_ushort_2_1_eye = _hog._Matx_ushort_2_1_eye

def _Matx_ushort_2_1_randu(a, b):
    return _hog._Matx_ushort_2_1_randu(a, b)
_Matx_ushort_2_1_randu = _hog._Matx_ushort_2_1_randu

def _Matx_ushort_2_1_randn(a, b):
    return _hog._Matx_ushort_2_1_randn(a, b)
_Matx_ushort_2_1_randn = _hog._Matx_ushort_2_1_randn


Matx21w = _Matx_ushort_2_1

class _Vec_ushort_2(_Matx_ushort_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_ushort_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_ushort_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_ushort_2_all)

    def mul(self, v):
        return _hog._Vec_ushort_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_ushort_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_ushort_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_ushort_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_ushort_2
    __del__ = lambda self: None
_Vec_ushort_2_swigregister = _hog._Vec_ushort_2_swigregister
_Vec_ushort_2_swigregister(_Vec_ushort_2)

def _Vec_ushort_2_all(alpha):
    return _hog._Vec_ushort_2_all(alpha)
_Vec_ushort_2_all = _hog._Vec_ushort_2_all

class _DataType_Vec_ushort_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_ushort_2_generic_type
    channels = _hog._DataType_Vec_ushort_2_channels
    fmt = _hog._DataType_Vec_ushort_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_ushort_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_ushort_2
    __del__ = lambda self: None
_DataType_Vec_ushort_2_swigregister = _hog._DataType_Vec_ushort_2_swigregister
_DataType_Vec_ushort_2_swigregister(_DataType_Vec_ushort_2)


Vec2w = _Vec_ushort_2
DataType_Vec2w = _DataType_Vec_ushort_2

class _Matx_ushort_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_ushort_3_1_rows
    cols = _hog._Matx_ushort_3_1_cols
    channels = _hog._Matx_ushort_3_1_channels
    shortdim = _hog._Matx_ushort_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_ushort_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_ushort_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_ushort_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_ushort_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_ushort_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_ushort_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_ushort_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_ushort_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_ushort_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_ushort_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_ushort_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_ushort_3_1_randn)

    def dot(self, v):
        return _hog._Matx_ushort_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_ushort_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_ushort_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_ushort_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_ushort_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_ushort_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_ushort_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_ushort_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_ushort_3_1_val_get, _hog._Matx_ushort_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_ushort_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_ushort_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_ushort_3_1
    __del__ = lambda self: None
_Matx_ushort_3_1_swigregister = _hog._Matx_ushort_3_1_swigregister
_Matx_ushort_3_1_swigregister(_Matx_ushort_3_1)

def _Matx_ushort_3_1_all(alpha):
    return _hog._Matx_ushort_3_1_all(alpha)
_Matx_ushort_3_1_all = _hog._Matx_ushort_3_1_all

def _Matx_ushort_3_1_zeros():
    return _hog._Matx_ushort_3_1_zeros()
_Matx_ushort_3_1_zeros = _hog._Matx_ushort_3_1_zeros

def _Matx_ushort_3_1_ones():
    return _hog._Matx_ushort_3_1_ones()
_Matx_ushort_3_1_ones = _hog._Matx_ushort_3_1_ones

def _Matx_ushort_3_1_eye():
    return _hog._Matx_ushort_3_1_eye()
_Matx_ushort_3_1_eye = _hog._Matx_ushort_3_1_eye

def _Matx_ushort_3_1_randu(a, b):
    return _hog._Matx_ushort_3_1_randu(a, b)
_Matx_ushort_3_1_randu = _hog._Matx_ushort_3_1_randu

def _Matx_ushort_3_1_randn(a, b):
    return _hog._Matx_ushort_3_1_randn(a, b)
_Matx_ushort_3_1_randn = _hog._Matx_ushort_3_1_randn


Matx31w = _Matx_ushort_3_1

class _Vec_ushort_3(_Matx_ushort_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_ushort_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_ushort_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_ushort_3_all)

    def mul(self, v):
        return _hog._Vec_ushort_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_ushort_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_ushort_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_ushort_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_ushort_3
    __del__ = lambda self: None
_Vec_ushort_3_swigregister = _hog._Vec_ushort_3_swigregister
_Vec_ushort_3_swigregister(_Vec_ushort_3)

def _Vec_ushort_3_all(alpha):
    return _hog._Vec_ushort_3_all(alpha)
_Vec_ushort_3_all = _hog._Vec_ushort_3_all

class _DataType_Vec_ushort_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_ushort_3_generic_type
    channels = _hog._DataType_Vec_ushort_3_channels
    fmt = _hog._DataType_Vec_ushort_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_ushort_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_ushort_3
    __del__ = lambda self: None
_DataType_Vec_ushort_3_swigregister = _hog._DataType_Vec_ushort_3_swigregister
_DataType_Vec_ushort_3_swigregister(_DataType_Vec_ushort_3)


Vec3w = _Vec_ushort_3
DataType_Vec3w = _DataType_Vec_ushort_3

class _Matx_ushort_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_ushort_4_1_rows
    cols = _hog._Matx_ushort_4_1_cols
    channels = _hog._Matx_ushort_4_1_channels
    shortdim = _hog._Matx_ushort_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_ushort_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_ushort_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_ushort_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_ushort_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_ushort_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_ushort_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_ushort_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_ushort_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_ushort_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_ushort_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_ushort_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_ushort_4_1_randn)

    def dot(self, v):
        return _hog._Matx_ushort_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_ushort_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_ushort_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_ushort_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_ushort_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_ushort_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_ushort_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_ushort_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_ushort_4_1_val_get, _hog._Matx_ushort_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_ushort_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_ushort_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_ushort_4_1
    __del__ = lambda self: None
_Matx_ushort_4_1_swigregister = _hog._Matx_ushort_4_1_swigregister
_Matx_ushort_4_1_swigregister(_Matx_ushort_4_1)

def _Matx_ushort_4_1_all(alpha):
    return _hog._Matx_ushort_4_1_all(alpha)
_Matx_ushort_4_1_all = _hog._Matx_ushort_4_1_all

def _Matx_ushort_4_1_zeros():
    return _hog._Matx_ushort_4_1_zeros()
_Matx_ushort_4_1_zeros = _hog._Matx_ushort_4_1_zeros

def _Matx_ushort_4_1_ones():
    return _hog._Matx_ushort_4_1_ones()
_Matx_ushort_4_1_ones = _hog._Matx_ushort_4_1_ones

def _Matx_ushort_4_1_eye():
    return _hog._Matx_ushort_4_1_eye()
_Matx_ushort_4_1_eye = _hog._Matx_ushort_4_1_eye

def _Matx_ushort_4_1_randu(a, b):
    return _hog._Matx_ushort_4_1_randu(a, b)
_Matx_ushort_4_1_randu = _hog._Matx_ushort_4_1_randu

def _Matx_ushort_4_1_randn(a, b):
    return _hog._Matx_ushort_4_1_randn(a, b)
_Matx_ushort_4_1_randn = _hog._Matx_ushort_4_1_randn


Matx41w = _Matx_ushort_4_1

class _Vec_ushort_4(_Matx_ushort_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_ushort_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_ushort_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_ushort_4_all)

    def mul(self, v):
        return _hog._Vec_ushort_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_ushort_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_ushort_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_ushort_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_ushort_4
    __del__ = lambda self: None
_Vec_ushort_4_swigregister = _hog._Vec_ushort_4_swigregister
_Vec_ushort_4_swigregister(_Vec_ushort_4)

def _Vec_ushort_4_all(alpha):
    return _hog._Vec_ushort_4_all(alpha)
_Vec_ushort_4_all = _hog._Vec_ushort_4_all

class _DataType_Vec_ushort_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_ushort_4_generic_type
    channels = _hog._DataType_Vec_ushort_4_channels
    fmt = _hog._DataType_Vec_ushort_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_ushort_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_ushort_4
    __del__ = lambda self: None
_DataType_Vec_ushort_4_swigregister = _hog._DataType_Vec_ushort_4_swigregister
_DataType_Vec_ushort_4_swigregister(_DataType_Vec_ushort_4)


Vec4w = _Vec_ushort_4
DataType_Vec4w = _DataType_Vec_ushort_4

class _cv_numpy_sizeof_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_int, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_int_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_int()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_int
    __del__ = lambda self: None
_cv_numpy_sizeof_int_swigregister = _hog._cv_numpy_sizeof_int_swigregister
_cv_numpy_sizeof_int_swigregister(_cv_numpy_sizeof_int)


if _cv_numpy_sizeof_int.value == 1:
    _cv_numpy_typestr_map["int"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["int"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_int.value)

class _intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _intArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._intArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._intArray___nonzero__(self)

    def __bool__(self):
        return _hog._intArray___bool__(self)

    def __len__(self):
        return _hog._intArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._intArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._intArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._intArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._intArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._intArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._intArray___setitem__(self, *args)

    def pop(self):
        return _hog._intArray_pop(self)

    def append(self, x):
        return _hog._intArray_append(self, x)

    def empty(self):
        return _hog._intArray_empty(self)

    def size(self):
        return _hog._intArray_size(self)

    def swap(self, v):
        return _hog._intArray_swap(self, v)

    def begin(self):
        return _hog._intArray_begin(self)

    def end(self):
        return _hog._intArray_end(self)

    def rbegin(self):
        return _hog._intArray_rbegin(self)

    def rend(self):
        return _hog._intArray_rend(self)

    def clear(self):
        return _hog._intArray_clear(self)

    def get_allocator(self):
        return _hog._intArray_get_allocator(self)

    def pop_back(self):
        return _hog._intArray_pop_back(self)

    def erase(self, *args):
        return _hog._intArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__intArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._intArray_push_back(self, x)

    def front(self):
        return _hog._intArray_front(self)

    def back(self):
        return _hog._intArray_back(self)

    def assign(self, n, x):
        return _hog._intArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._intArray_resize(self, *args)

    def insert(self, *args):
        return _hog._intArray_insert(self, *args)

    def reserve(self, n):
        return _hog._intArray_reserve(self, n)

    def capacity(self):
        return _hog._intArray_capacity(self)
    __swig_destroy__ = _hog.delete__intArray
    __del__ = lambda self: None
_intArray_swigregister = _hog._intArray_swigregister
_intArray_swigregister(_intArray)


_array_map["int"] = _intArray

class _Matx_int_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_int_2_1_rows
    cols = _hog._Matx_int_2_1_cols
    channels = _hog._Matx_int_2_1_channels
    shortdim = _hog._Matx_int_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_int_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_int_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_int_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_int_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_int_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_int_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_int_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_int_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_int_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_int_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_int_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_int_2_1_randn)

    def dot(self, v):
        return _hog._Matx_int_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_int_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_int_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_int_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_int_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_int_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_int_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_int_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_int_2_1_val_get, _hog._Matx_int_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_int_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_int_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_int_2_1
    __del__ = lambda self: None
_Matx_int_2_1_swigregister = _hog._Matx_int_2_1_swigregister
_Matx_int_2_1_swigregister(_Matx_int_2_1)

def _Matx_int_2_1_all(alpha):
    return _hog._Matx_int_2_1_all(alpha)
_Matx_int_2_1_all = _hog._Matx_int_2_1_all

def _Matx_int_2_1_zeros():
    return _hog._Matx_int_2_1_zeros()
_Matx_int_2_1_zeros = _hog._Matx_int_2_1_zeros

def _Matx_int_2_1_ones():
    return _hog._Matx_int_2_1_ones()
_Matx_int_2_1_ones = _hog._Matx_int_2_1_ones

def _Matx_int_2_1_eye():
    return _hog._Matx_int_2_1_eye()
_Matx_int_2_1_eye = _hog._Matx_int_2_1_eye

def _Matx_int_2_1_randu(a, b):
    return _hog._Matx_int_2_1_randu(a, b)
_Matx_int_2_1_randu = _hog._Matx_int_2_1_randu

def _Matx_int_2_1_randn(a, b):
    return _hog._Matx_int_2_1_randn(a, b)
_Matx_int_2_1_randn = _hog._Matx_int_2_1_randn


Matx21i = _Matx_int_2_1

class _Vec_int_2(_Matx_int_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_int_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_int_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_int_2_all)

    def mul(self, v):
        return _hog._Vec_int_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_int_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_int_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_int_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_int_2
    __del__ = lambda self: None
_Vec_int_2_swigregister = _hog._Vec_int_2_swigregister
_Vec_int_2_swigregister(_Vec_int_2)

def _Vec_int_2_all(alpha):
    return _hog._Vec_int_2_all(alpha)
_Vec_int_2_all = _hog._Vec_int_2_all

class _DataType_Vec_int_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_int_2_generic_type
    channels = _hog._DataType_Vec_int_2_channels
    fmt = _hog._DataType_Vec_int_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_int_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_int_2
    __del__ = lambda self: None
_DataType_Vec_int_2_swigregister = _hog._DataType_Vec_int_2_swigregister
_DataType_Vec_int_2_swigregister(_DataType_Vec_int_2)


Vec2i = _Vec_int_2
DataType_Vec2i = _DataType_Vec_int_2

class _Matx_int_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_int_3_1_rows
    cols = _hog._Matx_int_3_1_cols
    channels = _hog._Matx_int_3_1_channels
    shortdim = _hog._Matx_int_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_int_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_int_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_int_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_int_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_int_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_int_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_int_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_int_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_int_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_int_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_int_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_int_3_1_randn)

    def dot(self, v):
        return _hog._Matx_int_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_int_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_int_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_int_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_int_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_int_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_int_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_int_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_int_3_1_val_get, _hog._Matx_int_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_int_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_int_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_int_3_1
    __del__ = lambda self: None
_Matx_int_3_1_swigregister = _hog._Matx_int_3_1_swigregister
_Matx_int_3_1_swigregister(_Matx_int_3_1)

def _Matx_int_3_1_all(alpha):
    return _hog._Matx_int_3_1_all(alpha)
_Matx_int_3_1_all = _hog._Matx_int_3_1_all

def _Matx_int_3_1_zeros():
    return _hog._Matx_int_3_1_zeros()
_Matx_int_3_1_zeros = _hog._Matx_int_3_1_zeros

def _Matx_int_3_1_ones():
    return _hog._Matx_int_3_1_ones()
_Matx_int_3_1_ones = _hog._Matx_int_3_1_ones

def _Matx_int_3_1_eye():
    return _hog._Matx_int_3_1_eye()
_Matx_int_3_1_eye = _hog._Matx_int_3_1_eye

def _Matx_int_3_1_randu(a, b):
    return _hog._Matx_int_3_1_randu(a, b)
_Matx_int_3_1_randu = _hog._Matx_int_3_1_randu

def _Matx_int_3_1_randn(a, b):
    return _hog._Matx_int_3_1_randn(a, b)
_Matx_int_3_1_randn = _hog._Matx_int_3_1_randn


Matx31i = _Matx_int_3_1

class _Vec_int_3(_Matx_int_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_int_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_int_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_int_3_all)

    def mul(self, v):
        return _hog._Vec_int_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_int_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_int_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_int_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_int_3
    __del__ = lambda self: None
_Vec_int_3_swigregister = _hog._Vec_int_3_swigregister
_Vec_int_3_swigregister(_Vec_int_3)

def _Vec_int_3_all(alpha):
    return _hog._Vec_int_3_all(alpha)
_Vec_int_3_all = _hog._Vec_int_3_all

class _DataType_Vec_int_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_int_3_generic_type
    channels = _hog._DataType_Vec_int_3_channels
    fmt = _hog._DataType_Vec_int_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_int_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_int_3
    __del__ = lambda self: None
_DataType_Vec_int_3_swigregister = _hog._DataType_Vec_int_3_swigregister
_DataType_Vec_int_3_swigregister(_DataType_Vec_int_3)


Vec3i = _Vec_int_3
DataType_Vec3i = _DataType_Vec_int_3

class _Matx_int_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_int_4_1_rows
    cols = _hog._Matx_int_4_1_cols
    channels = _hog._Matx_int_4_1_channels
    shortdim = _hog._Matx_int_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_int_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_int_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_int_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_int_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_int_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_int_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_int_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_int_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_int_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_int_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_int_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_int_4_1_randn)

    def dot(self, v):
        return _hog._Matx_int_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_int_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_int_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_int_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_int_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_int_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_int_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_int_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_int_4_1_val_get, _hog._Matx_int_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_int_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_int_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_int_4_1
    __del__ = lambda self: None
_Matx_int_4_1_swigregister = _hog._Matx_int_4_1_swigregister
_Matx_int_4_1_swigregister(_Matx_int_4_1)

def _Matx_int_4_1_all(alpha):
    return _hog._Matx_int_4_1_all(alpha)
_Matx_int_4_1_all = _hog._Matx_int_4_1_all

def _Matx_int_4_1_zeros():
    return _hog._Matx_int_4_1_zeros()
_Matx_int_4_1_zeros = _hog._Matx_int_4_1_zeros

def _Matx_int_4_1_ones():
    return _hog._Matx_int_4_1_ones()
_Matx_int_4_1_ones = _hog._Matx_int_4_1_ones

def _Matx_int_4_1_eye():
    return _hog._Matx_int_4_1_eye()
_Matx_int_4_1_eye = _hog._Matx_int_4_1_eye

def _Matx_int_4_1_randu(a, b):
    return _hog._Matx_int_4_1_randu(a, b)
_Matx_int_4_1_randu = _hog._Matx_int_4_1_randu

def _Matx_int_4_1_randn(a, b):
    return _hog._Matx_int_4_1_randn(a, b)
_Matx_int_4_1_randn = _hog._Matx_int_4_1_randn


Matx41i = _Matx_int_4_1

class _Vec_int_4(_Matx_int_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_int_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_int_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_int_4_all)

    def mul(self, v):
        return _hog._Vec_int_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_int_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_int_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_int_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_int_4
    __del__ = lambda self: None
_Vec_int_4_swigregister = _hog._Vec_int_4_swigregister
_Vec_int_4_swigregister(_Vec_int_4)

def _Vec_int_4_all(alpha):
    return _hog._Vec_int_4_all(alpha)
_Vec_int_4_all = _hog._Vec_int_4_all

class _DataType_Vec_int_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_int_4_generic_type
    channels = _hog._DataType_Vec_int_4_channels
    fmt = _hog._DataType_Vec_int_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_int_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_int_4
    __del__ = lambda self: None
_DataType_Vec_int_4_swigregister = _hog._DataType_Vec_int_4_swigregister
_DataType_Vec_int_4_swigregister(_DataType_Vec_int_4)


Vec4i = _Vec_int_4
DataType_Vec4i = _DataType_Vec_int_4

class _Matx_int_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_6_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_int_6_1_rows
    cols = _hog._Matx_int_6_1_cols
    channels = _hog._Matx_int_6_1_channels
    shortdim = _hog._Matx_int_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_int_6_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_int_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_int_6_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_int_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_int_6_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_int_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_int_6_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_int_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_int_6_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_int_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_int_6_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_int_6_1_randn)

    def dot(self, v):
        return _hog._Matx_int_6_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_int_6_1_ddot(self, v)

    def t(self):
        return _hog._Matx_int_6_1_t(self)

    def mul(self, a):
        return _hog._Matx_int_6_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_int_6_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_int_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_int_6_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_int_6_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_int_6_1_val_get, _hog._Matx_int_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_int_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_int_6_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_int_6_1
    __del__ = lambda self: None
_Matx_int_6_1_swigregister = _hog._Matx_int_6_1_swigregister
_Matx_int_6_1_swigregister(_Matx_int_6_1)

def _Matx_int_6_1_all(alpha):
    return _hog._Matx_int_6_1_all(alpha)
_Matx_int_6_1_all = _hog._Matx_int_6_1_all

def _Matx_int_6_1_zeros():
    return _hog._Matx_int_6_1_zeros()
_Matx_int_6_1_zeros = _hog._Matx_int_6_1_zeros

def _Matx_int_6_1_ones():
    return _hog._Matx_int_6_1_ones()
_Matx_int_6_1_ones = _hog._Matx_int_6_1_ones

def _Matx_int_6_1_eye():
    return _hog._Matx_int_6_1_eye()
_Matx_int_6_1_eye = _hog._Matx_int_6_1_eye

def _Matx_int_6_1_randu(a, b):
    return _hog._Matx_int_6_1_randu(a, b)
_Matx_int_6_1_randu = _hog._Matx_int_6_1_randu

def _Matx_int_6_1_randn(a, b):
    return _hog._Matx_int_6_1_randn(a, b)
_Matx_int_6_1_randn = _hog._Matx_int_6_1_randn


Matx61i = _Matx_int_6_1

class _Vec_int_6(_Matx_int_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_6, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_int_6_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_int_6_all
    if _newclass:
        all = staticmethod(_hog._Vec_int_6_all)

    def mul(self, v):
        return _hog._Vec_int_6_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_int_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_int_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_int_6___str__(self)
    __swig_destroy__ = _hog.delete__Vec_int_6
    __del__ = lambda self: None
_Vec_int_6_swigregister = _hog._Vec_int_6_swigregister
_Vec_int_6_swigregister(_Vec_int_6)

def _Vec_int_6_all(alpha):
    return _hog._Vec_int_6_all(alpha)
_Vec_int_6_all = _hog._Vec_int_6_all

class _DataType_Vec_int_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_6, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_int_6_generic_type
    channels = _hog._DataType_Vec_int_6_channels
    fmt = _hog._DataType_Vec_int_6_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_int_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_int_6
    __del__ = lambda self: None
_DataType_Vec_int_6_swigregister = _hog._DataType_Vec_int_6_swigregister
_DataType_Vec_int_6_swigregister(_DataType_Vec_int_6)


Vec6i = _Vec_int_6
DataType_Vec6i = _DataType_Vec_int_6

class _Matx_int_8_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_8_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_8_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_int_8_1_rows
    cols = _hog._Matx_int_8_1_cols
    channels = _hog._Matx_int_8_1_channels
    shortdim = _hog._Matx_int_8_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_int_8_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_int_8_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_int_8_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_int_8_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_int_8_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_int_8_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_int_8_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_int_8_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_int_8_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_int_8_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_int_8_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_int_8_1_randn)

    def dot(self, v):
        return _hog._Matx_int_8_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_int_8_1_ddot(self, v)

    def t(self):
        return _hog._Matx_int_8_1_t(self)

    def mul(self, a):
        return _hog._Matx_int_8_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_int_8_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_int_8_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_int_8_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_int_8_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_int_8_1_val_get, _hog._Matx_int_8_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_int_8_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_int_8_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_int_8_1
    __del__ = lambda self: None
_Matx_int_8_1_swigregister = _hog._Matx_int_8_1_swigregister
_Matx_int_8_1_swigregister(_Matx_int_8_1)

def _Matx_int_8_1_all(alpha):
    return _hog._Matx_int_8_1_all(alpha)
_Matx_int_8_1_all = _hog._Matx_int_8_1_all

def _Matx_int_8_1_zeros():
    return _hog._Matx_int_8_1_zeros()
_Matx_int_8_1_zeros = _hog._Matx_int_8_1_zeros

def _Matx_int_8_1_ones():
    return _hog._Matx_int_8_1_ones()
_Matx_int_8_1_ones = _hog._Matx_int_8_1_ones

def _Matx_int_8_1_eye():
    return _hog._Matx_int_8_1_eye()
_Matx_int_8_1_eye = _hog._Matx_int_8_1_eye

def _Matx_int_8_1_randu(a, b):
    return _hog._Matx_int_8_1_randu(a, b)
_Matx_int_8_1_randu = _hog._Matx_int_8_1_randu

def _Matx_int_8_1_randn(a, b):
    return _hog._Matx_int_8_1_randn(a, b)
_Matx_int_8_1_randn = _hog._Matx_int_8_1_randn


Matx81i = _Matx_int_8_1

class _Vec_int_8(_Matx_int_8_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_8_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_8, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_8_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_8, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_int_8_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_int_8_all
    if _newclass:
        all = staticmethod(_hog._Vec_int_8_all)

    def mul(self, v):
        return _hog._Vec_int_8_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_int_8___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_int_8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_int_8___str__(self)
    __swig_destroy__ = _hog.delete__Vec_int_8
    __del__ = lambda self: None
_Vec_int_8_swigregister = _hog._Vec_int_8_swigregister
_Vec_int_8_swigregister(_Vec_int_8)

def _Vec_int_8_all(alpha):
    return _hog._Vec_int_8_all(alpha)
_Vec_int_8_all = _hog._Vec_int_8_all

class _DataType_Vec_int_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_8, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_int_8_generic_type
    channels = _hog._DataType_Vec_int_8_channels
    fmt = _hog._DataType_Vec_int_8_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_int_8()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_int_8
    __del__ = lambda self: None
_DataType_Vec_int_8_swigregister = _hog._DataType_Vec_int_8_swigregister
_DataType_Vec_int_8_swigregister(_DataType_Vec_int_8)


Vec8i = _Vec_int_8
DataType_Vec8i = _DataType_Vec_int_8

class _cv_numpy_sizeof_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_float, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_float_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_float()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_float
    __del__ = lambda self: None
_cv_numpy_sizeof_float_swigregister = _hog._cv_numpy_sizeof_float_swigregister
_cv_numpy_sizeof_float_swigregister(_cv_numpy_sizeof_float)


if _cv_numpy_sizeof_float.value == 1:
    _cv_numpy_typestr_map["float"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["float"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_float.value)

class _floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _floatArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._floatArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._floatArray___nonzero__(self)

    def __bool__(self):
        return _hog._floatArray___bool__(self)

    def __len__(self):
        return _hog._floatArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._floatArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._floatArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._floatArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._floatArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._floatArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._floatArray___setitem__(self, *args)

    def pop(self):
        return _hog._floatArray_pop(self)

    def append(self, x):
        return _hog._floatArray_append(self, x)

    def empty(self):
        return _hog._floatArray_empty(self)

    def size(self):
        return _hog._floatArray_size(self)

    def swap(self, v):
        return _hog._floatArray_swap(self, v)

    def begin(self):
        return _hog._floatArray_begin(self)

    def end(self):
        return _hog._floatArray_end(self)

    def rbegin(self):
        return _hog._floatArray_rbegin(self)

    def rend(self):
        return _hog._floatArray_rend(self)

    def clear(self):
        return _hog._floatArray_clear(self)

    def get_allocator(self):
        return _hog._floatArray_get_allocator(self)

    def pop_back(self):
        return _hog._floatArray_pop_back(self)

    def erase(self, *args):
        return _hog._floatArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__floatArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._floatArray_push_back(self, x)

    def front(self):
        return _hog._floatArray_front(self)

    def back(self):
        return _hog._floatArray_back(self)

    def assign(self, n, x):
        return _hog._floatArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._floatArray_resize(self, *args)

    def insert(self, *args):
        return _hog._floatArray_insert(self, *args)

    def reserve(self, n):
        return _hog._floatArray_reserve(self, n)

    def capacity(self):
        return _hog._floatArray_capacity(self)
    __swig_destroy__ = _hog.delete__floatArray
    __del__ = lambda self: None
_floatArray_swigregister = _hog._floatArray_swigregister
_floatArray_swigregister(_floatArray)


_array_map["float"] = _floatArray

class _Matx_float_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_2_1_rows
    cols = _hog._Matx_float_2_1_cols
    channels = _hog._Matx_float_2_1_channels
    shortdim = _hog._Matx_float_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_2_1_randn)

    def dot(self, v):
        return _hog._Matx_float_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_float_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_float_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_2_1_val_get, _hog._Matx_float_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_2_1
    __del__ = lambda self: None
_Matx_float_2_1_swigregister = _hog._Matx_float_2_1_swigregister
_Matx_float_2_1_swigregister(_Matx_float_2_1)

def _Matx_float_2_1_all(alpha):
    return _hog._Matx_float_2_1_all(alpha)
_Matx_float_2_1_all = _hog._Matx_float_2_1_all

def _Matx_float_2_1_zeros():
    return _hog._Matx_float_2_1_zeros()
_Matx_float_2_1_zeros = _hog._Matx_float_2_1_zeros

def _Matx_float_2_1_ones():
    return _hog._Matx_float_2_1_ones()
_Matx_float_2_1_ones = _hog._Matx_float_2_1_ones

def _Matx_float_2_1_eye():
    return _hog._Matx_float_2_1_eye()
_Matx_float_2_1_eye = _hog._Matx_float_2_1_eye

def _Matx_float_2_1_randu(a, b):
    return _hog._Matx_float_2_1_randu(a, b)
_Matx_float_2_1_randu = _hog._Matx_float_2_1_randu

def _Matx_float_2_1_randn(a, b):
    return _hog._Matx_float_2_1_randn(a, b)
_Matx_float_2_1_randn = _hog._Matx_float_2_1_randn


Matx21f = _Matx_float_2_1

class _Vec_float_2(_Matx_float_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_float_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_float_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_float_2_all)

    def mul(self, v):
        return _hog._Vec_float_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_float_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_float_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_float_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_float_2
    __del__ = lambda self: None
_Vec_float_2_swigregister = _hog._Vec_float_2_swigregister
_Vec_float_2_swigregister(_Vec_float_2)

def _Vec_float_2_all(alpha):
    return _hog._Vec_float_2_all(alpha)
_Vec_float_2_all = _hog._Vec_float_2_all

class _DataType_Vec_float_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_float_2_generic_type
    channels = _hog._DataType_Vec_float_2_channels
    fmt = _hog._DataType_Vec_float_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_float_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_float_2
    __del__ = lambda self: None
_DataType_Vec_float_2_swigregister = _hog._DataType_Vec_float_2_swigregister
_DataType_Vec_float_2_swigregister(_DataType_Vec_float_2)


Vec2f = _Vec_float_2
DataType_Vec2f = _DataType_Vec_float_2

class _Matx_float_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_3_1_rows
    cols = _hog._Matx_float_3_1_cols
    channels = _hog._Matx_float_3_1_channels
    shortdim = _hog._Matx_float_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_3_1_randn)

    def dot(self, v):
        return _hog._Matx_float_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_float_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_float_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_3_1_val_get, _hog._Matx_float_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_3_1
    __del__ = lambda self: None
_Matx_float_3_1_swigregister = _hog._Matx_float_3_1_swigregister
_Matx_float_3_1_swigregister(_Matx_float_3_1)

def _Matx_float_3_1_all(alpha):
    return _hog._Matx_float_3_1_all(alpha)
_Matx_float_3_1_all = _hog._Matx_float_3_1_all

def _Matx_float_3_1_zeros():
    return _hog._Matx_float_3_1_zeros()
_Matx_float_3_1_zeros = _hog._Matx_float_3_1_zeros

def _Matx_float_3_1_ones():
    return _hog._Matx_float_3_1_ones()
_Matx_float_3_1_ones = _hog._Matx_float_3_1_ones

def _Matx_float_3_1_eye():
    return _hog._Matx_float_3_1_eye()
_Matx_float_3_1_eye = _hog._Matx_float_3_1_eye

def _Matx_float_3_1_randu(a, b):
    return _hog._Matx_float_3_1_randu(a, b)
_Matx_float_3_1_randu = _hog._Matx_float_3_1_randu

def _Matx_float_3_1_randn(a, b):
    return _hog._Matx_float_3_1_randn(a, b)
_Matx_float_3_1_randn = _hog._Matx_float_3_1_randn


Matx31f = _Matx_float_3_1

class _Vec_float_3(_Matx_float_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_float_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_float_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_float_3_all)

    def mul(self, v):
        return _hog._Vec_float_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_float_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_float_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_float_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_float_3
    __del__ = lambda self: None
_Vec_float_3_swigregister = _hog._Vec_float_3_swigregister
_Vec_float_3_swigregister(_Vec_float_3)

def _Vec_float_3_all(alpha):
    return _hog._Vec_float_3_all(alpha)
_Vec_float_3_all = _hog._Vec_float_3_all

class _DataType_Vec_float_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_float_3_generic_type
    channels = _hog._DataType_Vec_float_3_channels
    fmt = _hog._DataType_Vec_float_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_float_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_float_3
    __del__ = lambda self: None
_DataType_Vec_float_3_swigregister = _hog._DataType_Vec_float_3_swigregister
_DataType_Vec_float_3_swigregister(_DataType_Vec_float_3)


Vec3f = _Vec_float_3
DataType_Vec3f = _DataType_Vec_float_3

class _Matx_float_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_4_1_rows
    cols = _hog._Matx_float_4_1_cols
    channels = _hog._Matx_float_4_1_channels
    shortdim = _hog._Matx_float_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_4_1_randn)

    def dot(self, v):
        return _hog._Matx_float_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_float_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_float_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_4_1_val_get, _hog._Matx_float_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_4_1
    __del__ = lambda self: None
_Matx_float_4_1_swigregister = _hog._Matx_float_4_1_swigregister
_Matx_float_4_1_swigregister(_Matx_float_4_1)

def _Matx_float_4_1_all(alpha):
    return _hog._Matx_float_4_1_all(alpha)
_Matx_float_4_1_all = _hog._Matx_float_4_1_all

def _Matx_float_4_1_zeros():
    return _hog._Matx_float_4_1_zeros()
_Matx_float_4_1_zeros = _hog._Matx_float_4_1_zeros

def _Matx_float_4_1_ones():
    return _hog._Matx_float_4_1_ones()
_Matx_float_4_1_ones = _hog._Matx_float_4_1_ones

def _Matx_float_4_1_eye():
    return _hog._Matx_float_4_1_eye()
_Matx_float_4_1_eye = _hog._Matx_float_4_1_eye

def _Matx_float_4_1_randu(a, b):
    return _hog._Matx_float_4_1_randu(a, b)
_Matx_float_4_1_randu = _hog._Matx_float_4_1_randu

def _Matx_float_4_1_randn(a, b):
    return _hog._Matx_float_4_1_randn(a, b)
_Matx_float_4_1_randn = _hog._Matx_float_4_1_randn


Matx41f = _Matx_float_4_1

class _Vec_float_4(_Matx_float_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_float_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_float_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_float_4_all)

    def mul(self, v):
        return _hog._Vec_float_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_float_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_float_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_float_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_float_4
    __del__ = lambda self: None
_Vec_float_4_swigregister = _hog._Vec_float_4_swigregister
_Vec_float_4_swigregister(_Vec_float_4)

def _Vec_float_4_all(alpha):
    return _hog._Vec_float_4_all(alpha)
_Vec_float_4_all = _hog._Vec_float_4_all

class _DataType_Vec_float_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_float_4_generic_type
    channels = _hog._DataType_Vec_float_4_channels
    fmt = _hog._DataType_Vec_float_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_float_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_float_4
    __del__ = lambda self: None
_DataType_Vec_float_4_swigregister = _hog._DataType_Vec_float_4_swigregister
_DataType_Vec_float_4_swigregister(_DataType_Vec_float_4)


Vec4f = _Vec_float_4
DataType_Vec4f = _DataType_Vec_float_4

class _Matx_float_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_6_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_6_1_rows
    cols = _hog._Matx_float_6_1_cols
    channels = _hog._Matx_float_6_1_channels
    shortdim = _hog._Matx_float_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_6_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_6_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_6_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_6_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_6_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_6_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_6_1_randn)

    def dot(self, v):
        return _hog._Matx_float_6_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_6_1_ddot(self, v)

    def t(self):
        return _hog._Matx_float_6_1_t(self)

    def mul(self, a):
        return _hog._Matx_float_6_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_6_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_6_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_6_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_6_1_val_get, _hog._Matx_float_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_6_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_6_1
    __del__ = lambda self: None
_Matx_float_6_1_swigregister = _hog._Matx_float_6_1_swigregister
_Matx_float_6_1_swigregister(_Matx_float_6_1)

def _Matx_float_6_1_all(alpha):
    return _hog._Matx_float_6_1_all(alpha)
_Matx_float_6_1_all = _hog._Matx_float_6_1_all

def _Matx_float_6_1_zeros():
    return _hog._Matx_float_6_1_zeros()
_Matx_float_6_1_zeros = _hog._Matx_float_6_1_zeros

def _Matx_float_6_1_ones():
    return _hog._Matx_float_6_1_ones()
_Matx_float_6_1_ones = _hog._Matx_float_6_1_ones

def _Matx_float_6_1_eye():
    return _hog._Matx_float_6_1_eye()
_Matx_float_6_1_eye = _hog._Matx_float_6_1_eye

def _Matx_float_6_1_randu(a, b):
    return _hog._Matx_float_6_1_randu(a, b)
_Matx_float_6_1_randu = _hog._Matx_float_6_1_randu

def _Matx_float_6_1_randn(a, b):
    return _hog._Matx_float_6_1_randn(a, b)
_Matx_float_6_1_randn = _hog._Matx_float_6_1_randn


Matx61f = _Matx_float_6_1

class _Vec_float_6(_Matx_float_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_6, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_float_6_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_float_6_all
    if _newclass:
        all = staticmethod(_hog._Vec_float_6_all)

    def mul(self, v):
        return _hog._Vec_float_6_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_float_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_float_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_float_6___str__(self)
    __swig_destroy__ = _hog.delete__Vec_float_6
    __del__ = lambda self: None
_Vec_float_6_swigregister = _hog._Vec_float_6_swigregister
_Vec_float_6_swigregister(_Vec_float_6)

def _Vec_float_6_all(alpha):
    return _hog._Vec_float_6_all(alpha)
_Vec_float_6_all = _hog._Vec_float_6_all

class _DataType_Vec_float_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_6, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_float_6_generic_type
    channels = _hog._DataType_Vec_float_6_channels
    fmt = _hog._DataType_Vec_float_6_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_float_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_float_6
    __del__ = lambda self: None
_DataType_Vec_float_6_swigregister = _hog._DataType_Vec_float_6_swigregister
_DataType_Vec_float_6_swigregister(_DataType_Vec_float_6)


Vec6f = _Vec_float_6
DataType_Vec6f = _DataType_Vec_float_6

class _cv_numpy_sizeof_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_double, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_double_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_double()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_double
    __del__ = lambda self: None
_cv_numpy_sizeof_double_swigregister = _hog._cv_numpy_sizeof_double_swigregister
_cv_numpy_sizeof_double_swigregister(_cv_numpy_sizeof_double)


if _cv_numpy_sizeof_double.value == 1:
    _cv_numpy_typestr_map["double"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["double"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_double.value)

class _doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _doubleArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hog._doubleArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hog._doubleArray___nonzero__(self)

    def __bool__(self):
        return _hog._doubleArray___bool__(self)

    def __len__(self):
        return _hog._doubleArray___len__(self)

    def __getslice__(self, i, j):
        return _hog._doubleArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hog._doubleArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hog._doubleArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hog._doubleArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hog._doubleArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hog._doubleArray___setitem__(self, *args)

    def pop(self):
        return _hog._doubleArray_pop(self)

    def append(self, x):
        return _hog._doubleArray_append(self, x)

    def empty(self):
        return _hog._doubleArray_empty(self)

    def size(self):
        return _hog._doubleArray_size(self)

    def swap(self, v):
        return _hog._doubleArray_swap(self, v)

    def begin(self):
        return _hog._doubleArray_begin(self)

    def end(self):
        return _hog._doubleArray_end(self)

    def rbegin(self):
        return _hog._doubleArray_rbegin(self)

    def rend(self):
        return _hog._doubleArray_rend(self)

    def clear(self):
        return _hog._doubleArray_clear(self)

    def get_allocator(self):
        return _hog._doubleArray_get_allocator(self)

    def pop_back(self):
        return _hog._doubleArray_pop_back(self)

    def erase(self, *args):
        return _hog._doubleArray_erase(self, *args)

    def __init__(self, *args):
        this = _hog.new__doubleArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hog._doubleArray_push_back(self, x)

    def front(self):
        return _hog._doubleArray_front(self)

    def back(self):
        return _hog._doubleArray_back(self)

    def assign(self, n, x):
        return _hog._doubleArray_assign(self, n, x)

    def resize(self, *args):
        return _hog._doubleArray_resize(self, *args)

    def insert(self, *args):
        return _hog._doubleArray_insert(self, *args)

    def reserve(self, n):
        return _hog._doubleArray_reserve(self, n)

    def capacity(self):
        return _hog._doubleArray_capacity(self)
    __swig_destroy__ = _hog.delete__doubleArray
    __del__ = lambda self: None
_doubleArray_swigregister = _hog._doubleArray_swigregister
_doubleArray_swigregister(_doubleArray)


_array_map["double"] = _doubleArray

class _Matx_double_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_2_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_2_1_rows
    cols = _hog._Matx_double_2_1_cols
    channels = _hog._Matx_double_2_1_channels
    shortdim = _hog._Matx_double_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_2_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_2_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_2_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_2_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_2_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_2_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_2_1_randn)

    def dot(self, v):
        return _hog._Matx_double_2_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_2_1_ddot(self, v)

    def t(self):
        return _hog._Matx_double_2_1_t(self)

    def mul(self, a):
        return _hog._Matx_double_2_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_2_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_2_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_2_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_2_1_val_get, _hog._Matx_double_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_2_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_2_1
    __del__ = lambda self: None
_Matx_double_2_1_swigregister = _hog._Matx_double_2_1_swigregister
_Matx_double_2_1_swigregister(_Matx_double_2_1)

def _Matx_double_2_1_all(alpha):
    return _hog._Matx_double_2_1_all(alpha)
_Matx_double_2_1_all = _hog._Matx_double_2_1_all

def _Matx_double_2_1_zeros():
    return _hog._Matx_double_2_1_zeros()
_Matx_double_2_1_zeros = _hog._Matx_double_2_1_zeros

def _Matx_double_2_1_ones():
    return _hog._Matx_double_2_1_ones()
_Matx_double_2_1_ones = _hog._Matx_double_2_1_ones

def _Matx_double_2_1_eye():
    return _hog._Matx_double_2_1_eye()
_Matx_double_2_1_eye = _hog._Matx_double_2_1_eye

def _Matx_double_2_1_randu(a, b):
    return _hog._Matx_double_2_1_randu(a, b)
_Matx_double_2_1_randu = _hog._Matx_double_2_1_randu

def _Matx_double_2_1_randn(a, b):
    return _hog._Matx_double_2_1_randn(a, b)
_Matx_double_2_1_randn = _hog._Matx_double_2_1_randn


Matx21d = _Matx_double_2_1

class _Vec_double_2(_Matx_double_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_2, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_double_2_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_double_2_all
    if _newclass:
        all = staticmethod(_hog._Vec_double_2_all)

    def mul(self, v):
        return _hog._Vec_double_2_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_double_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_double_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_double_2___str__(self)
    __swig_destroy__ = _hog.delete__Vec_double_2
    __del__ = lambda self: None
_Vec_double_2_swigregister = _hog._Vec_double_2_swigregister
_Vec_double_2_swigregister(_Vec_double_2)

def _Vec_double_2_all(alpha):
    return _hog._Vec_double_2_all(alpha)
_Vec_double_2_all = _hog._Vec_double_2_all

class _DataType_Vec_double_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_2, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_double_2_generic_type
    channels = _hog._DataType_Vec_double_2_channels
    fmt = _hog._DataType_Vec_double_2_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_double_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_double_2
    __del__ = lambda self: None
_DataType_Vec_double_2_swigregister = _hog._DataType_Vec_double_2_swigregister
_DataType_Vec_double_2_swigregister(_DataType_Vec_double_2)


Vec2d = _Vec_double_2
DataType_Vec2d = _DataType_Vec_double_2

class _Matx_double_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_3_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_3_1_rows
    cols = _hog._Matx_double_3_1_cols
    channels = _hog._Matx_double_3_1_channels
    shortdim = _hog._Matx_double_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_3_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_3_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_3_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_3_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_3_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_3_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_3_1_randn)

    def dot(self, v):
        return _hog._Matx_double_3_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_3_1_ddot(self, v)

    def t(self):
        return _hog._Matx_double_3_1_t(self)

    def mul(self, a):
        return _hog._Matx_double_3_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_3_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_3_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_3_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_3_1_val_get, _hog._Matx_double_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_3_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_3_1
    __del__ = lambda self: None
_Matx_double_3_1_swigregister = _hog._Matx_double_3_1_swigregister
_Matx_double_3_1_swigregister(_Matx_double_3_1)

def _Matx_double_3_1_all(alpha):
    return _hog._Matx_double_3_1_all(alpha)
_Matx_double_3_1_all = _hog._Matx_double_3_1_all

def _Matx_double_3_1_zeros():
    return _hog._Matx_double_3_1_zeros()
_Matx_double_3_1_zeros = _hog._Matx_double_3_1_zeros

def _Matx_double_3_1_ones():
    return _hog._Matx_double_3_1_ones()
_Matx_double_3_1_ones = _hog._Matx_double_3_1_ones

def _Matx_double_3_1_eye():
    return _hog._Matx_double_3_1_eye()
_Matx_double_3_1_eye = _hog._Matx_double_3_1_eye

def _Matx_double_3_1_randu(a, b):
    return _hog._Matx_double_3_1_randu(a, b)
_Matx_double_3_1_randu = _hog._Matx_double_3_1_randu

def _Matx_double_3_1_randn(a, b):
    return _hog._Matx_double_3_1_randn(a, b)
_Matx_double_3_1_randn = _hog._Matx_double_3_1_randn


Matx31d = _Matx_double_3_1

class _Vec_double_3(_Matx_double_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_3, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_double_3_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_double_3_all
    if _newclass:
        all = staticmethod(_hog._Vec_double_3_all)

    def mul(self, v):
        return _hog._Vec_double_3_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_double_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_double_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_double_3___str__(self)
    __swig_destroy__ = _hog.delete__Vec_double_3
    __del__ = lambda self: None
_Vec_double_3_swigregister = _hog._Vec_double_3_swigregister
_Vec_double_3_swigregister(_Vec_double_3)

def _Vec_double_3_all(alpha):
    return _hog._Vec_double_3_all(alpha)
_Vec_double_3_all = _hog._Vec_double_3_all

class _DataType_Vec_double_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_3, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_double_3_generic_type
    channels = _hog._DataType_Vec_double_3_channels
    fmt = _hog._DataType_Vec_double_3_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_double_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_double_3
    __del__ = lambda self: None
_DataType_Vec_double_3_swigregister = _hog._DataType_Vec_double_3_swigregister
_DataType_Vec_double_3_swigregister(_DataType_Vec_double_3)


Vec3d = _Vec_double_3
DataType_Vec3d = _DataType_Vec_double_3

class _Matx_double_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_4_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_4_1_rows
    cols = _hog._Matx_double_4_1_cols
    channels = _hog._Matx_double_4_1_channels
    shortdim = _hog._Matx_double_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_4_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_4_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_4_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_4_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_4_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_4_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_4_1_randn)

    def dot(self, v):
        return _hog._Matx_double_4_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_4_1_ddot(self, v)

    def t(self):
        return _hog._Matx_double_4_1_t(self)

    def mul(self, a):
        return _hog._Matx_double_4_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_4_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_4_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_4_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_4_1_val_get, _hog._Matx_double_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_4_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_4_1
    __del__ = lambda self: None
_Matx_double_4_1_swigregister = _hog._Matx_double_4_1_swigregister
_Matx_double_4_1_swigregister(_Matx_double_4_1)

def _Matx_double_4_1_all(alpha):
    return _hog._Matx_double_4_1_all(alpha)
_Matx_double_4_1_all = _hog._Matx_double_4_1_all

def _Matx_double_4_1_zeros():
    return _hog._Matx_double_4_1_zeros()
_Matx_double_4_1_zeros = _hog._Matx_double_4_1_zeros

def _Matx_double_4_1_ones():
    return _hog._Matx_double_4_1_ones()
_Matx_double_4_1_ones = _hog._Matx_double_4_1_ones

def _Matx_double_4_1_eye():
    return _hog._Matx_double_4_1_eye()
_Matx_double_4_1_eye = _hog._Matx_double_4_1_eye

def _Matx_double_4_1_randu(a, b):
    return _hog._Matx_double_4_1_randu(a, b)
_Matx_double_4_1_randu = _hog._Matx_double_4_1_randu

def _Matx_double_4_1_randn(a, b):
    return _hog._Matx_double_4_1_randn(a, b)
_Matx_double_4_1_randn = _hog._Matx_double_4_1_randn


Matx41d = _Matx_double_4_1

class _Vec_double_4(_Matx_double_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_4, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_double_4_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_double_4_all
    if _newclass:
        all = staticmethod(_hog._Vec_double_4_all)

    def mul(self, v):
        return _hog._Vec_double_4_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_double_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_double_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_double_4___str__(self)
    __swig_destroy__ = _hog.delete__Vec_double_4
    __del__ = lambda self: None
_Vec_double_4_swigregister = _hog._Vec_double_4_swigregister
_Vec_double_4_swigregister(_Vec_double_4)

def _Vec_double_4_all(alpha):
    return _hog._Vec_double_4_all(alpha)
_Vec_double_4_all = _hog._Vec_double_4_all

class _DataType_Vec_double_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_4, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_double_4_generic_type
    channels = _hog._DataType_Vec_double_4_channels
    fmt = _hog._DataType_Vec_double_4_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_double_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_double_4
    __del__ = lambda self: None
_DataType_Vec_double_4_swigregister = _hog._DataType_Vec_double_4_swigregister
_DataType_Vec_double_4_swigregister(_DataType_Vec_double_4)


Vec4d = _Vec_double_4
DataType_Vec4d = _DataType_Vec_double_4

class _Matx_double_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_6_1, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_6_1_rows
    cols = _hog._Matx_double_6_1_cols
    channels = _hog._Matx_double_6_1_channels
    shortdim = _hog._Matx_double_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_6_1_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_6_1_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_6_1_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_6_1_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_6_1_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_6_1_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_6_1_randn)

    def dot(self, v):
        return _hog._Matx_double_6_1_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_6_1_ddot(self, v)

    def t(self):
        return _hog._Matx_double_6_1_t(self)

    def mul(self, a):
        return _hog._Matx_double_6_1_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_6_1_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_6_1_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_6_1_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_6_1_val_get, _hog._Matx_double_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_6_1___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_6_1
    __del__ = lambda self: None
_Matx_double_6_1_swigregister = _hog._Matx_double_6_1_swigregister
_Matx_double_6_1_swigregister(_Matx_double_6_1)

def _Matx_double_6_1_all(alpha):
    return _hog._Matx_double_6_1_all(alpha)
_Matx_double_6_1_all = _hog._Matx_double_6_1_all

def _Matx_double_6_1_zeros():
    return _hog._Matx_double_6_1_zeros()
_Matx_double_6_1_zeros = _hog._Matx_double_6_1_zeros

def _Matx_double_6_1_ones():
    return _hog._Matx_double_6_1_ones()
_Matx_double_6_1_ones = _hog._Matx_double_6_1_ones

def _Matx_double_6_1_eye():
    return _hog._Matx_double_6_1_eye()
_Matx_double_6_1_eye = _hog._Matx_double_6_1_eye

def _Matx_double_6_1_randu(a, b):
    return _hog._Matx_double_6_1_randu(a, b)
_Matx_double_6_1_randu = _hog._Matx_double_6_1_randu

def _Matx_double_6_1_randn(a, b):
    return _hog._Matx_double_6_1_randn(a, b)
_Matx_double_6_1_randn = _hog._Matx_double_6_1_randn


Matx61d = _Matx_double_6_1

class _Vec_double_6(_Matx_double_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_6, name)
    __repr__ = _swig_repr
    channels = _hog._Vec_double_6_channels
    __swig_getmethods__["all"] = lambda x: _hog._Vec_double_6_all
    if _newclass:
        all = staticmethod(_hog._Vec_double_6_all)

    def mul(self, v):
        return _hog._Vec_double_6_mul(self, v)

    def __call__(self, i):
        return _hog._Vec_double_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Vec_double_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Vec_double_6___str__(self)
    __swig_destroy__ = _hog.delete__Vec_double_6
    __del__ = lambda self: None
_Vec_double_6_swigregister = _hog._Vec_double_6_swigregister
_Vec_double_6_swigregister(_Vec_double_6)

def _Vec_double_6_all(alpha):
    return _hog._Vec_double_6_all(alpha)
_Vec_double_6_all = _hog._Vec_double_6_all

class _DataType_Vec_double_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_6, name)
    __repr__ = _swig_repr
    generic_type = _hog._DataType_Vec_double_6_generic_type
    channels = _hog._DataType_Vec_double_6_channels
    fmt = _hog._DataType_Vec_double_6_fmt

    def __init__(self):
        this = _hog.new__DataType_Vec_double_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__DataType_Vec_double_6
    __del__ = lambda self: None
_DataType_Vec_double_6_swigregister = _hog._DataType_Vec_double_6_swigregister
_DataType_Vec_double_6_swigregister(_DataType_Vec_double_6)


Vec6d = _Vec_double_6
DataType_Vec6d = _DataType_Vec_double_6

class _mat__np_array_constructor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _mat__np_array_constructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _mat__np_array_constructor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new__mat__np_array_constructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__mat__np_array_constructor
    __del__ = lambda self: None
_mat__np_array_constructor_swigregister = _hog._mat__np_array_constructor_swigregister
_mat__np_array_constructor_swigregister(_mat__np_array_constructor)


def _depthToDtype(depth):
    return _hog._depthToDtype(depth)
_depthToDtype = _hog._depthToDtype

def _toCvType(dtype, nChannel):
    return _hog._toCvType(dtype, nChannel)
_toCvType = _hog._toCvType
class _cv_numpy_sizeof_uchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_uchar, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_uchar_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_uchar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_uchar
    __del__ = lambda self: None
_cv_numpy_sizeof_uchar_swigregister = _hog._cv_numpy_sizeof_uchar_swigregister
_cv_numpy_sizeof_uchar_swigregister(_cv_numpy_sizeof_uchar)


if _cv_numpy_sizeof_uchar.value == 1:
    _cv_numpy_typestr_map["uchar"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["uchar"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_uchar.value)

class _Mat__uchar(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__uchar, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__uchar, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__uchar_create(self, *args)

    def cross(self, m):
        return _hog._Mat__uchar_cross(self, m)

    def row(self, y):
        return _hog._Mat__uchar_row(self, y)

    def col(self, x):
        return _hog._Mat__uchar_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__uchar_diag(self, d)

    def clone(self):
        return _hog._Mat__uchar_clone(self)

    def elemSize(self):
        return _hog._Mat__uchar_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__uchar_elemSize1(self)

    def type(self):
        return _hog._Mat__uchar_type(self)

    def depth(self):
        return _hog._Mat__uchar_depth(self)

    def channels(self):
        return _hog._Mat__uchar_channels(self)

    def step1(self, i=0):
        return _hog._Mat__uchar_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__uchar_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__uchar_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__uchar___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__uchar(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__uchar___str__(self)
    __swig_destroy__ = _hog.delete__Mat__uchar
    __del__ = lambda self: None
_Mat__uchar_swigregister = _hog._Mat__uchar_swigregister
_Mat__uchar_swigregister(_Mat__uchar)


Mat1b = _Mat__uchar

class _cv_numpy_sizeof_Vec2b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2b, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2b_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2b()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2b
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2b_swigregister = _hog._cv_numpy_sizeof_Vec2b_swigregister
_cv_numpy_sizeof_Vec2b_swigregister(_cv_numpy_sizeof_Vec2b)


if _cv_numpy_sizeof_Vec2b.value == 1:
    _cv_numpy_typestr_map["Vec2b"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec2b"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec2b.value)

class _Mat__Vec2b(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2b, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2b, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2b_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2b_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2b_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2b_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2b_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2b_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2b_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2b_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2b_type(self)

    def depth(self):
        return _hog._Mat__Vec2b_depth(self)

    def channels(self):
        return _hog._Mat__Vec2b_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2b_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2b_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2b_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2b___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2b(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2b___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2b
    __del__ = lambda self: None
_Mat__Vec2b_swigregister = _hog._Mat__Vec2b_swigregister
_Mat__Vec2b_swigregister(_Mat__Vec2b)


Mat2b = _Mat__Vec2b

class _cv_numpy_sizeof_Vec3b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3b, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3b_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3b()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3b
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3b_swigregister = _hog._cv_numpy_sizeof_Vec3b_swigregister
_cv_numpy_sizeof_Vec3b_swigregister(_cv_numpy_sizeof_Vec3b)


if _cv_numpy_sizeof_Vec3b.value == 1:
    _cv_numpy_typestr_map["Vec3b"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec3b"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec3b.value)

class _Mat__Vec3b(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3b, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3b, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3b_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3b_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3b_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3b_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3b_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3b_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3b_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3b_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3b_type(self)

    def depth(self):
        return _hog._Mat__Vec3b_depth(self)

    def channels(self):
        return _hog._Mat__Vec3b_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3b_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3b_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3b_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3b___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3b(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3b___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3b
    __del__ = lambda self: None
_Mat__Vec3b_swigregister = _hog._Mat__Vec3b_swigregister
_Mat__Vec3b_swigregister(_Mat__Vec3b)


Mat3b = _Mat__Vec3b

class _cv_numpy_sizeof_Vec4b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4b, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4b_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4b()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4b
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4b_swigregister = _hog._cv_numpy_sizeof_Vec4b_swigregister
_cv_numpy_sizeof_Vec4b_swigregister(_cv_numpy_sizeof_Vec4b)


if _cv_numpy_sizeof_Vec4b.value == 1:
    _cv_numpy_typestr_map["Vec4b"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec4b"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec4b.value)

class _Mat__Vec4b(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4b, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4b, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4b_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4b_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4b_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4b_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4b_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4b_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4b_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4b_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4b_type(self)

    def depth(self):
        return _hog._Mat__Vec4b_depth(self)

    def channels(self):
        return _hog._Mat__Vec4b_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4b_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4b_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4b_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4b___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4b(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4b___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4b
    __del__ = lambda self: None
_Mat__Vec4b_swigregister = _hog._Mat__Vec4b_swigregister
_Mat__Vec4b_swigregister(_Mat__Vec4b)


Mat4b = _Mat__Vec4b

class _Mat__short(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__short, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__short, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__short_create(self, *args)

    def cross(self, m):
        return _hog._Mat__short_cross(self, m)

    def row(self, y):
        return _hog._Mat__short_row(self, y)

    def col(self, x):
        return _hog._Mat__short_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__short_diag(self, d)

    def clone(self):
        return _hog._Mat__short_clone(self)

    def elemSize(self):
        return _hog._Mat__short_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__short_elemSize1(self)

    def type(self):
        return _hog._Mat__short_type(self)

    def depth(self):
        return _hog._Mat__short_depth(self)

    def channels(self):
        return _hog._Mat__short_channels(self)

    def step1(self, i=0):
        return _hog._Mat__short_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__short_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__short_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__short___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__short(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__short___str__(self)
    __swig_destroy__ = _hog.delete__Mat__short
    __del__ = lambda self: None
_Mat__short_swigregister = _hog._Mat__short_swigregister
_Mat__short_swigregister(_Mat__short)


Mat1s = _Mat__short

class _cv_numpy_sizeof_Vec2s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2s, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2s_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2s
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2s_swigregister = _hog._cv_numpy_sizeof_Vec2s_swigregister
_cv_numpy_sizeof_Vec2s_swigregister(_cv_numpy_sizeof_Vec2s)


if _cv_numpy_sizeof_Vec2s.value == 1:
    _cv_numpy_typestr_map["Vec2s"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec2s"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec2s.value)

class _Mat__Vec2s(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2s, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2s, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2s_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2s_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2s_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2s_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2s_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2s_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2s_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2s_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2s_type(self)

    def depth(self):
        return _hog._Mat__Vec2s_depth(self)

    def channels(self):
        return _hog._Mat__Vec2s_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2s_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2s_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2s_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2s___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2s(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2s___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2s
    __del__ = lambda self: None
_Mat__Vec2s_swigregister = _hog._Mat__Vec2s_swigregister
_Mat__Vec2s_swigregister(_Mat__Vec2s)


Mat2s = _Mat__Vec2s

class _cv_numpy_sizeof_Vec3s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3s, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3s_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3s
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3s_swigregister = _hog._cv_numpy_sizeof_Vec3s_swigregister
_cv_numpy_sizeof_Vec3s_swigregister(_cv_numpy_sizeof_Vec3s)


if _cv_numpy_sizeof_Vec3s.value == 1:
    _cv_numpy_typestr_map["Vec3s"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec3s"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec3s.value)

class _Mat__Vec3s(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3s, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3s, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3s_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3s_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3s_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3s_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3s_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3s_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3s_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3s_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3s_type(self)

    def depth(self):
        return _hog._Mat__Vec3s_depth(self)

    def channels(self):
        return _hog._Mat__Vec3s_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3s_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3s_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3s_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3s___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3s(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3s___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3s
    __del__ = lambda self: None
_Mat__Vec3s_swigregister = _hog._Mat__Vec3s_swigregister
_Mat__Vec3s_swigregister(_Mat__Vec3s)


Mat3s = _Mat__Vec3s

class _cv_numpy_sizeof_Vec4s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4s, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4s_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4s
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4s_swigregister = _hog._cv_numpy_sizeof_Vec4s_swigregister
_cv_numpy_sizeof_Vec4s_swigregister(_cv_numpy_sizeof_Vec4s)


if _cv_numpy_sizeof_Vec4s.value == 1:
    _cv_numpy_typestr_map["Vec4s"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec4s"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec4s.value)

class _Mat__Vec4s(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4s, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4s, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4s_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4s_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4s_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4s_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4s_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4s_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4s_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4s_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4s_type(self)

    def depth(self):
        return _hog._Mat__Vec4s_depth(self)

    def channels(self):
        return _hog._Mat__Vec4s_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4s_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4s_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4s_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4s___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4s(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4s___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4s
    __del__ = lambda self: None
_Mat__Vec4s_swigregister = _hog._Mat__Vec4s_swigregister
_Mat__Vec4s_swigregister(_Mat__Vec4s)


Mat4s = _Mat__Vec4s

class _Mat__ushort(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__ushort, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__ushort, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__ushort_create(self, *args)

    def cross(self, m):
        return _hog._Mat__ushort_cross(self, m)

    def row(self, y):
        return _hog._Mat__ushort_row(self, y)

    def col(self, x):
        return _hog._Mat__ushort_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__ushort_diag(self, d)

    def clone(self):
        return _hog._Mat__ushort_clone(self)

    def elemSize(self):
        return _hog._Mat__ushort_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__ushort_elemSize1(self)

    def type(self):
        return _hog._Mat__ushort_type(self)

    def depth(self):
        return _hog._Mat__ushort_depth(self)

    def channels(self):
        return _hog._Mat__ushort_channels(self)

    def step1(self, i=0):
        return _hog._Mat__ushort_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__ushort_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__ushort_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__ushort___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__ushort(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__ushort___str__(self)
    __swig_destroy__ = _hog.delete__Mat__ushort
    __del__ = lambda self: None
_Mat__ushort_swigregister = _hog._Mat__ushort_swigregister
_Mat__ushort_swigregister(_Mat__ushort)


Mat1w = _Mat__ushort

class _cv_numpy_sizeof_Vec2w(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2w, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2w, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2w_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2w()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2w
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2w_swigregister = _hog._cv_numpy_sizeof_Vec2w_swigregister
_cv_numpy_sizeof_Vec2w_swigregister(_cv_numpy_sizeof_Vec2w)


if _cv_numpy_sizeof_Vec2w.value == 1:
    _cv_numpy_typestr_map["Vec2w"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec2w"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec2w.value)

class _Mat__Vec2w(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2w, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2w, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2w_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2w_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2w_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2w_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2w_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2w_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2w_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2w_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2w_type(self)

    def depth(self):
        return _hog._Mat__Vec2w_depth(self)

    def channels(self):
        return _hog._Mat__Vec2w_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2w_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2w_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2w_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2w___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2w(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2w___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2w
    __del__ = lambda self: None
_Mat__Vec2w_swigregister = _hog._Mat__Vec2w_swigregister
_Mat__Vec2w_swigregister(_Mat__Vec2w)


Mat2w = _Mat__Vec2w

class _cv_numpy_sizeof_Vec3w(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3w, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3w, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3w_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3w()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3w
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3w_swigregister = _hog._cv_numpy_sizeof_Vec3w_swigregister
_cv_numpy_sizeof_Vec3w_swigregister(_cv_numpy_sizeof_Vec3w)


if _cv_numpy_sizeof_Vec3w.value == 1:
    _cv_numpy_typestr_map["Vec3w"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec3w"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec3w.value)

class _Mat__Vec3w(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3w, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3w, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3w_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3w_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3w_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3w_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3w_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3w_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3w_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3w_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3w_type(self)

    def depth(self):
        return _hog._Mat__Vec3w_depth(self)

    def channels(self):
        return _hog._Mat__Vec3w_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3w_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3w_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3w_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3w___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3w(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3w___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3w
    __del__ = lambda self: None
_Mat__Vec3w_swigregister = _hog._Mat__Vec3w_swigregister
_Mat__Vec3w_swigregister(_Mat__Vec3w)


Mat3w = _Mat__Vec3w

class _cv_numpy_sizeof_Vec4w(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4w, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4w, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4w_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4w()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4w
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4w_swigregister = _hog._cv_numpy_sizeof_Vec4w_swigregister
_cv_numpy_sizeof_Vec4w_swigregister(_cv_numpy_sizeof_Vec4w)


if _cv_numpy_sizeof_Vec4w.value == 1:
    _cv_numpy_typestr_map["Vec4w"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["Vec4w"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_Vec4w.value)

class _Mat__Vec4w(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4w, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4w, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4w_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4w_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4w_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4w_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4w_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4w_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4w_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4w_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4w_type(self)

    def depth(self):
        return _hog._Mat__Vec4w_depth(self)

    def channels(self):
        return _hog._Mat__Vec4w_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4w_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4w_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4w_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4w___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4w(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4w___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4w
    __del__ = lambda self: None
_Mat__Vec4w_swigregister = _hog._Mat__Vec4w_swigregister
_Mat__Vec4w_swigregister(_Mat__Vec4w)


Mat4w = _Mat__Vec4w

class _Mat__int(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__int, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__int, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__int_create(self, *args)

    def cross(self, m):
        return _hog._Mat__int_cross(self, m)

    def row(self, y):
        return _hog._Mat__int_row(self, y)

    def col(self, x):
        return _hog._Mat__int_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__int_diag(self, d)

    def clone(self):
        return _hog._Mat__int_clone(self)

    def elemSize(self):
        return _hog._Mat__int_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__int_elemSize1(self)

    def type(self):
        return _hog._Mat__int_type(self)

    def depth(self):
        return _hog._Mat__int_depth(self)

    def channels(self):
        return _hog._Mat__int_channels(self)

    def step1(self, i=0):
        return _hog._Mat__int_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__int_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__int_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__int___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__int___str__(self)
    __swig_destroy__ = _hog.delete__Mat__int
    __del__ = lambda self: None
_Mat__int_swigregister = _hog._Mat__int_swigregister
_Mat__int_swigregister(_Mat__int)


Mat1i = _Mat__int

class _cv_numpy_sizeof_Vec2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2i, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2i_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2i()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2i
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2i_swigregister = _hog._cv_numpy_sizeof_Vec2i_swigregister
_cv_numpy_sizeof_Vec2i_swigregister(_cv_numpy_sizeof_Vec2i)


if _cv_numpy_sizeof_Vec2i.value == 1:
    _cv_numpy_typestr_map["Vec2i"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec2i"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec2i.value)

class _Mat__Vec2i(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2i, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2i, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2i_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2i_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2i_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2i_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2i_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2i_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2i_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2i_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2i_type(self)

    def depth(self):
        return _hog._Mat__Vec2i_depth(self)

    def channels(self):
        return _hog._Mat__Vec2i_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2i_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2i_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2i_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2i___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2i(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2i___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2i
    __del__ = lambda self: None
_Mat__Vec2i_swigregister = _hog._Mat__Vec2i_swigregister
_Mat__Vec2i_swigregister(_Mat__Vec2i)


Mat2i = _Mat__Vec2i

class _cv_numpy_sizeof_Vec3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3i, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3i_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3i()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3i
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3i_swigregister = _hog._cv_numpy_sizeof_Vec3i_swigregister
_cv_numpy_sizeof_Vec3i_swigregister(_cv_numpy_sizeof_Vec3i)


if _cv_numpy_sizeof_Vec3i.value == 1:
    _cv_numpy_typestr_map["Vec3i"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec3i"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec3i.value)

class _Mat__Vec3i(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3i, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3i, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3i_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3i_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3i_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3i_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3i_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3i_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3i_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3i_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3i_type(self)

    def depth(self):
        return _hog._Mat__Vec3i_depth(self)

    def channels(self):
        return _hog._Mat__Vec3i_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3i_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3i_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3i_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3i___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3i(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3i___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3i
    __del__ = lambda self: None
_Mat__Vec3i_swigregister = _hog._Mat__Vec3i_swigregister
_Mat__Vec3i_swigregister(_Mat__Vec3i)


Mat3i = _Mat__Vec3i

class _cv_numpy_sizeof_Vec4i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4i, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4i_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4i()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4i
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4i_swigregister = _hog._cv_numpy_sizeof_Vec4i_swigregister
_cv_numpy_sizeof_Vec4i_swigregister(_cv_numpy_sizeof_Vec4i)


if _cv_numpy_sizeof_Vec4i.value == 1:
    _cv_numpy_typestr_map["Vec4i"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["Vec4i"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_Vec4i.value)

class _Mat__Vec4i(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4i, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4i, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4i_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4i_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4i_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4i_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4i_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4i_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4i_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4i_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4i_type(self)

    def depth(self):
        return _hog._Mat__Vec4i_depth(self)

    def channels(self):
        return _hog._Mat__Vec4i_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4i_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4i_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4i_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4i___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4i(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4i___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4i
    __del__ = lambda self: None
_Mat__Vec4i_swigregister = _hog._Mat__Vec4i_swigregister
_Mat__Vec4i_swigregister(_Mat__Vec4i)


Mat4i = _Mat__Vec4i

class _Mat__float(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__float, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__float, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__float_create(self, *args)

    def cross(self, m):
        return _hog._Mat__float_cross(self, m)

    def row(self, y):
        return _hog._Mat__float_row(self, y)

    def col(self, x):
        return _hog._Mat__float_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__float_diag(self, d)

    def clone(self):
        return _hog._Mat__float_clone(self)

    def elemSize(self):
        return _hog._Mat__float_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__float_elemSize1(self)

    def type(self):
        return _hog._Mat__float_type(self)

    def depth(self):
        return _hog._Mat__float_depth(self)

    def channels(self):
        return _hog._Mat__float_channels(self)

    def step1(self, i=0):
        return _hog._Mat__float_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__float_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__float_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__float___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__float___str__(self)
    __swig_destroy__ = _hog.delete__Mat__float
    __del__ = lambda self: None
_Mat__float_swigregister = _hog._Mat__float_swigregister
_Mat__float_swigregister(_Mat__float)


Mat1f = _Mat__float

class _cv_numpy_sizeof_Vec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2f, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2f_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2f
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2f_swigregister = _hog._cv_numpy_sizeof_Vec2f_swigregister
_cv_numpy_sizeof_Vec2f_swigregister(_cv_numpy_sizeof_Vec2f)


if _cv_numpy_sizeof_Vec2f.value == 1:
    _cv_numpy_typestr_map["Vec2f"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec2f"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec2f.value)

class _Mat__Vec2f(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2f, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2f, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2f_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2f_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2f_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2f_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2f_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2f_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2f_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2f_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2f_type(self)

    def depth(self):
        return _hog._Mat__Vec2f_depth(self)

    def channels(self):
        return _hog._Mat__Vec2f_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2f_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2f_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2f_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2f___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2f(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2f___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2f
    __del__ = lambda self: None
_Mat__Vec2f_swigregister = _hog._Mat__Vec2f_swigregister
_Mat__Vec2f_swigregister(_Mat__Vec2f)


Mat2f = _Mat__Vec2f

class _cv_numpy_sizeof_Vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3f, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3f_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3f
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3f_swigregister = _hog._cv_numpy_sizeof_Vec3f_swigregister
_cv_numpy_sizeof_Vec3f_swigregister(_cv_numpy_sizeof_Vec3f)


if _cv_numpy_sizeof_Vec3f.value == 1:
    _cv_numpy_typestr_map["Vec3f"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec3f"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec3f.value)

class _Mat__Vec3f(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3f, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3f, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3f_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3f_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3f_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3f_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3f_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3f_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3f_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3f_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3f_type(self)

    def depth(self):
        return _hog._Mat__Vec3f_depth(self)

    def channels(self):
        return _hog._Mat__Vec3f_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3f_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3f_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3f_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3f___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3f(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3f___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3f
    __del__ = lambda self: None
_Mat__Vec3f_swigregister = _hog._Mat__Vec3f_swigregister
_Mat__Vec3f_swigregister(_Mat__Vec3f)


Mat3f = _Mat__Vec3f

class _cv_numpy_sizeof_Vec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4f, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4f_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4f
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4f_swigregister = _hog._cv_numpy_sizeof_Vec4f_swigregister
_cv_numpy_sizeof_Vec4f_swigregister(_cv_numpy_sizeof_Vec4f)


if _cv_numpy_sizeof_Vec4f.value == 1:
    _cv_numpy_typestr_map["Vec4f"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec4f"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec4f.value)

class _Mat__Vec4f(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4f, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4f, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4f_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4f_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4f_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4f_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4f_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4f_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4f_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4f_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4f_type(self)

    def depth(self):
        return _hog._Mat__Vec4f_depth(self)

    def channels(self):
        return _hog._Mat__Vec4f_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4f_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4f_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4f_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4f___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4f(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4f___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4f
    __del__ = lambda self: None
_Mat__Vec4f_swigregister = _hog._Mat__Vec4f_swigregister
_Mat__Vec4f_swigregister(_Mat__Vec4f)


Mat4f = _Mat__Vec4f

class _Mat__double(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__double, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__double, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__double_create(self, *args)

    def cross(self, m):
        return _hog._Mat__double_cross(self, m)

    def row(self, y):
        return _hog._Mat__double_row(self, y)

    def col(self, x):
        return _hog._Mat__double_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__double_diag(self, d)

    def clone(self):
        return _hog._Mat__double_clone(self)

    def elemSize(self):
        return _hog._Mat__double_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__double_elemSize1(self)

    def type(self):
        return _hog._Mat__double_type(self)

    def depth(self):
        return _hog._Mat__double_depth(self)

    def channels(self):
        return _hog._Mat__double_channels(self)

    def step1(self, i=0):
        return _hog._Mat__double_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__double_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__double_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__double___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__double___str__(self)
    __swig_destroy__ = _hog.delete__Mat__double
    __del__ = lambda self: None
_Mat__double_swigregister = _hog._Mat__double_swigregister
_Mat__double_swigregister(_Mat__double)


Mat1d = _Mat__double

class _cv_numpy_sizeof_Vec2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec2d, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec2d_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec2d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec2d
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec2d_swigregister = _hog._cv_numpy_sizeof_Vec2d_swigregister
_cv_numpy_sizeof_Vec2d_swigregister(_cv_numpy_sizeof_Vec2d)


if _cv_numpy_sizeof_Vec2d.value == 1:
    _cv_numpy_typestr_map["Vec2d"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec2d"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec2d.value)

class _Mat__Vec2d(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec2d, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec2d_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec2d_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec2d_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec2d_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec2d_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec2d_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec2d_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec2d_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec2d_type(self)

    def depth(self):
        return _hog._Mat__Vec2d_depth(self)

    def channels(self):
        return _hog._Mat__Vec2d_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec2d_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec2d_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec2d_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec2d___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec2d(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec2d___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec2d
    __del__ = lambda self: None
_Mat__Vec2d_swigregister = _hog._Mat__Vec2d_swigregister
_Mat__Vec2d_swigregister(_Mat__Vec2d)


Mat2d = _Mat__Vec2d

class _cv_numpy_sizeof_Vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec3d, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec3d_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec3d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec3d
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec3d_swigregister = _hog._cv_numpy_sizeof_Vec3d_swigregister
_cv_numpy_sizeof_Vec3d_swigregister(_cv_numpy_sizeof_Vec3d)


if _cv_numpy_sizeof_Vec3d.value == 1:
    _cv_numpy_typestr_map["Vec3d"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec3d"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec3d.value)

class _Mat__Vec3d(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec3d, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec3d_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec3d_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec3d_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec3d_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec3d_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec3d_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec3d_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec3d_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec3d_type(self)

    def depth(self):
        return _hog._Mat__Vec3d_depth(self)

    def channels(self):
        return _hog._Mat__Vec3d_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec3d_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec3d_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec3d_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec3d___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec3d(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec3d___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec3d
    __del__ = lambda self: None
_Mat__Vec3d_swigregister = _hog._Mat__Vec3d_swigregister
_Mat__Vec3d_swigregister(_Mat__Vec3d)


Mat3d = _Mat__Vec3d

class _cv_numpy_sizeof_Vec4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_Vec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_Vec4d, name)
    __repr__ = _swig_repr
    value = _hog._cv_numpy_sizeof_Vec4d_value

    def __init__(self):
        this = _hog.new__cv_numpy_sizeof_Vec4d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete__cv_numpy_sizeof_Vec4d
    __del__ = lambda self: None
_cv_numpy_sizeof_Vec4d_swigregister = _hog._cv_numpy_sizeof_Vec4d_swigregister
_cv_numpy_sizeof_Vec4d_swigregister(_cv_numpy_sizeof_Vec4d)


if _cv_numpy_sizeof_Vec4d.value == 1:
    _cv_numpy_typestr_map["Vec4d"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["Vec4d"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_Vec4d.value)

class _Mat__Vec4d(Mat):
    __swig_setmethods__ = {}
    for _s in [Mat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Mat__Vec4d, name, value)
    __swig_getmethods__ = {}
    for _s in [Mat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Mat__Vec4d, name)
    __repr__ = _swig_repr

    def create(self, *args):
        return _hog._Mat__Vec4d_create(self, *args)

    def cross(self, m):
        return _hog._Mat__Vec4d_cross(self, m)

    def row(self, y):
        return _hog._Mat__Vec4d_row(self, y)

    def col(self, x):
        return _hog._Mat__Vec4d_col(self, x)

    def diag(self, d=0):
        return _hog._Mat__Vec4d_diag(self, d)

    def clone(self):
        return _hog._Mat__Vec4d_clone(self)

    def elemSize(self):
        return _hog._Mat__Vec4d_elemSize(self)

    def elemSize1(self):
        return _hog._Mat__Vec4d_elemSize1(self)

    def type(self):
        return _hog._Mat__Vec4d_type(self)

    def depth(self):
        return _hog._Mat__Vec4d_depth(self)

    def channels(self):
        return _hog._Mat__Vec4d_channels(self)

    def step1(self, i=0):
        return _hog._Mat__Vec4d_step1(self, i)

    def stepT(self, i=0):
        return _hog._Mat__Vec4d_stepT(self, i)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _hog._Mat__Vec4d_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _hog._Mat__Vec4d___call__(self, *args)

    def __init__(self, *args):
        this = _hog.new__Mat__Vec4d(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    @classmethod
    def __check_channels_compatibility(cls, array):
        obj = cls()
        n_channel = obj.channels()

        if n_channel == 1:
            if len(array.shape) != 2:
                raise ValueError("{} expects a 2-dimensional numpy ndarray.".format(cls))
        else:
            if len(array.shape) != 3:
                raise ValueError("{} expects a 3-dimensional numpy ndarray.".format(cls))
            elif array.shape[2] != n_channel:
                raise ValueError("{} expects the last ndarray dimension to have a size of {}".format(cls, n_channel))

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        if cls()._typestr() != array.__array_interface__['typestr']:
            raise ValueError("{} expects a {} datatype.".format(cls, cls()._typestr()))

        cls.__check_channels_compatibility(array)

        new_mat = cls(_mat__np_array_constructor(),
                      array.shape[0],
                      array.shape[1],
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _hog._Mat__Vec4d___str__(self)
    __swig_destroy__ = _hog.delete__Mat__Vec4d
    __del__ = lambda self: None
_Mat__Vec4d_swigregister = _hog._Mat__Vec4d_swigregister
_Mat__Vec4d_swigregister(_Mat__Vec4d)


Mat4d = _Mat__Vec4d

class _Matx_float_1_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_1_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_1_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_1_2_rows
    cols = _hog._Matx_float_1_2_cols
    channels = _hog._Matx_float_1_2_channels
    shortdim = _hog._Matx_float_1_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_1_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_1_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_1_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_1_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_1_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_1_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_1_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_1_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_1_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_1_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_1_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_1_2_randn)

    def dot(self, v):
        return _hog._Matx_float_1_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_1_2_ddot(self, v)

    def t(self):
        return _hog._Matx_float_1_2_t(self)

    def mul(self, a):
        return _hog._Matx_float_1_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_1_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_1_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_1_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_1_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_1_2_val_get, _hog._Matx_float_1_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_1_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_1_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_1_2
    __del__ = lambda self: None
_Matx_float_1_2_swigregister = _hog._Matx_float_1_2_swigregister
_Matx_float_1_2_swigregister(_Matx_float_1_2)

def _Matx_float_1_2_all(alpha):
    return _hog._Matx_float_1_2_all(alpha)
_Matx_float_1_2_all = _hog._Matx_float_1_2_all

def _Matx_float_1_2_zeros():
    return _hog._Matx_float_1_2_zeros()
_Matx_float_1_2_zeros = _hog._Matx_float_1_2_zeros

def _Matx_float_1_2_ones():
    return _hog._Matx_float_1_2_ones()
_Matx_float_1_2_ones = _hog._Matx_float_1_2_ones

def _Matx_float_1_2_eye():
    return _hog._Matx_float_1_2_eye()
_Matx_float_1_2_eye = _hog._Matx_float_1_2_eye

def _Matx_float_1_2_randu(a, b):
    return _hog._Matx_float_1_2_randu(a, b)
_Matx_float_1_2_randu = _hog._Matx_float_1_2_randu

def _Matx_float_1_2_randn(a, b):
    return _hog._Matx_float_1_2_randn(a, b)
_Matx_float_1_2_randn = _hog._Matx_float_1_2_randn


Matx12f = _Matx_float_1_2

class _Matx_double_1_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_1_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_1_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_1_2_rows
    cols = _hog._Matx_double_1_2_cols
    channels = _hog._Matx_double_1_2_channels
    shortdim = _hog._Matx_double_1_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_1_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_1_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_1_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_1_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_1_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_1_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_1_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_1_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_1_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_1_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_1_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_1_2_randn)

    def dot(self, v):
        return _hog._Matx_double_1_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_1_2_ddot(self, v)

    def t(self):
        return _hog._Matx_double_1_2_t(self)

    def mul(self, a):
        return _hog._Matx_double_1_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_1_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_1_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_1_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_1_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_1_2_val_get, _hog._Matx_double_1_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_1_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_1_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_1_2
    __del__ = lambda self: None
_Matx_double_1_2_swigregister = _hog._Matx_double_1_2_swigregister
_Matx_double_1_2_swigregister(_Matx_double_1_2)

def _Matx_double_1_2_all(alpha):
    return _hog._Matx_double_1_2_all(alpha)
_Matx_double_1_2_all = _hog._Matx_double_1_2_all

def _Matx_double_1_2_zeros():
    return _hog._Matx_double_1_2_zeros()
_Matx_double_1_2_zeros = _hog._Matx_double_1_2_zeros

def _Matx_double_1_2_ones():
    return _hog._Matx_double_1_2_ones()
_Matx_double_1_2_ones = _hog._Matx_double_1_2_ones

def _Matx_double_1_2_eye():
    return _hog._Matx_double_1_2_eye()
_Matx_double_1_2_eye = _hog._Matx_double_1_2_eye

def _Matx_double_1_2_randu(a, b):
    return _hog._Matx_double_1_2_randu(a, b)
_Matx_double_1_2_randu = _hog._Matx_double_1_2_randu

def _Matx_double_1_2_randn(a, b):
    return _hog._Matx_double_1_2_randn(a, b)
_Matx_double_1_2_randn = _hog._Matx_double_1_2_randn


Matx12d = _Matx_double_1_2

class _Matx_float_1_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_1_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_1_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_1_3_rows
    cols = _hog._Matx_float_1_3_cols
    channels = _hog._Matx_float_1_3_channels
    shortdim = _hog._Matx_float_1_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_1_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_1_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_1_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_1_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_1_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_1_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_1_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_1_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_1_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_1_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_1_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_1_3_randn)

    def dot(self, v):
        return _hog._Matx_float_1_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_1_3_ddot(self, v)

    def t(self):
        return _hog._Matx_float_1_3_t(self)

    def mul(self, a):
        return _hog._Matx_float_1_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_1_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_1_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_1_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_1_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_1_3_val_get, _hog._Matx_float_1_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_1_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_1_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_1_3
    __del__ = lambda self: None
_Matx_float_1_3_swigregister = _hog._Matx_float_1_3_swigregister
_Matx_float_1_3_swigregister(_Matx_float_1_3)

def _Matx_float_1_3_all(alpha):
    return _hog._Matx_float_1_3_all(alpha)
_Matx_float_1_3_all = _hog._Matx_float_1_3_all

def _Matx_float_1_3_zeros():
    return _hog._Matx_float_1_3_zeros()
_Matx_float_1_3_zeros = _hog._Matx_float_1_3_zeros

def _Matx_float_1_3_ones():
    return _hog._Matx_float_1_3_ones()
_Matx_float_1_3_ones = _hog._Matx_float_1_3_ones

def _Matx_float_1_3_eye():
    return _hog._Matx_float_1_3_eye()
_Matx_float_1_3_eye = _hog._Matx_float_1_3_eye

def _Matx_float_1_3_randu(a, b):
    return _hog._Matx_float_1_3_randu(a, b)
_Matx_float_1_3_randu = _hog._Matx_float_1_3_randu

def _Matx_float_1_3_randn(a, b):
    return _hog._Matx_float_1_3_randn(a, b)
_Matx_float_1_3_randn = _hog._Matx_float_1_3_randn


Matx13f = _Matx_float_1_3

class _Matx_double_1_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_1_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_1_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_1_3_rows
    cols = _hog._Matx_double_1_3_cols
    channels = _hog._Matx_double_1_3_channels
    shortdim = _hog._Matx_double_1_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_1_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_1_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_1_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_1_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_1_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_1_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_1_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_1_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_1_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_1_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_1_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_1_3_randn)

    def dot(self, v):
        return _hog._Matx_double_1_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_1_3_ddot(self, v)

    def t(self):
        return _hog._Matx_double_1_3_t(self)

    def mul(self, a):
        return _hog._Matx_double_1_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_1_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_1_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_1_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_1_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_1_3_val_get, _hog._Matx_double_1_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_1_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_1_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_1_3
    __del__ = lambda self: None
_Matx_double_1_3_swigregister = _hog._Matx_double_1_3_swigregister
_Matx_double_1_3_swigregister(_Matx_double_1_3)

def _Matx_double_1_3_all(alpha):
    return _hog._Matx_double_1_3_all(alpha)
_Matx_double_1_3_all = _hog._Matx_double_1_3_all

def _Matx_double_1_3_zeros():
    return _hog._Matx_double_1_3_zeros()
_Matx_double_1_3_zeros = _hog._Matx_double_1_3_zeros

def _Matx_double_1_3_ones():
    return _hog._Matx_double_1_3_ones()
_Matx_double_1_3_ones = _hog._Matx_double_1_3_ones

def _Matx_double_1_3_eye():
    return _hog._Matx_double_1_3_eye()
_Matx_double_1_3_eye = _hog._Matx_double_1_3_eye

def _Matx_double_1_3_randu(a, b):
    return _hog._Matx_double_1_3_randu(a, b)
_Matx_double_1_3_randu = _hog._Matx_double_1_3_randu

def _Matx_double_1_3_randn(a, b):
    return _hog._Matx_double_1_3_randn(a, b)
_Matx_double_1_3_randn = _hog._Matx_double_1_3_randn


Matx13d = _Matx_double_1_3

class _Matx_float_1_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_1_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_1_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_1_4_rows
    cols = _hog._Matx_float_1_4_cols
    channels = _hog._Matx_float_1_4_channels
    shortdim = _hog._Matx_float_1_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_1_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_1_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_1_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_1_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_1_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_1_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_1_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_1_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_1_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_1_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_1_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_1_4_randn)

    def dot(self, v):
        return _hog._Matx_float_1_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_1_4_ddot(self, v)

    def t(self):
        return _hog._Matx_float_1_4_t(self)

    def mul(self, a):
        return _hog._Matx_float_1_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_1_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_1_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_1_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_1_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_1_4_val_get, _hog._Matx_float_1_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_1_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_1_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_1_4
    __del__ = lambda self: None
_Matx_float_1_4_swigregister = _hog._Matx_float_1_4_swigregister
_Matx_float_1_4_swigregister(_Matx_float_1_4)

def _Matx_float_1_4_all(alpha):
    return _hog._Matx_float_1_4_all(alpha)
_Matx_float_1_4_all = _hog._Matx_float_1_4_all

def _Matx_float_1_4_zeros():
    return _hog._Matx_float_1_4_zeros()
_Matx_float_1_4_zeros = _hog._Matx_float_1_4_zeros

def _Matx_float_1_4_ones():
    return _hog._Matx_float_1_4_ones()
_Matx_float_1_4_ones = _hog._Matx_float_1_4_ones

def _Matx_float_1_4_eye():
    return _hog._Matx_float_1_4_eye()
_Matx_float_1_4_eye = _hog._Matx_float_1_4_eye

def _Matx_float_1_4_randu(a, b):
    return _hog._Matx_float_1_4_randu(a, b)
_Matx_float_1_4_randu = _hog._Matx_float_1_4_randu

def _Matx_float_1_4_randn(a, b):
    return _hog._Matx_float_1_4_randn(a, b)
_Matx_float_1_4_randn = _hog._Matx_float_1_4_randn


Matx14f = _Matx_float_1_4

class _Matx_double_1_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_1_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_1_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_1_4_rows
    cols = _hog._Matx_double_1_4_cols
    channels = _hog._Matx_double_1_4_channels
    shortdim = _hog._Matx_double_1_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_1_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_1_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_1_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_1_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_1_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_1_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_1_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_1_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_1_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_1_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_1_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_1_4_randn)

    def dot(self, v):
        return _hog._Matx_double_1_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_1_4_ddot(self, v)

    def t(self):
        return _hog._Matx_double_1_4_t(self)

    def mul(self, a):
        return _hog._Matx_double_1_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_1_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_1_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_1_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_1_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_1_4_val_get, _hog._Matx_double_1_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_1_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_1_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_1_4
    __del__ = lambda self: None
_Matx_double_1_4_swigregister = _hog._Matx_double_1_4_swigregister
_Matx_double_1_4_swigregister(_Matx_double_1_4)

def _Matx_double_1_4_all(alpha):
    return _hog._Matx_double_1_4_all(alpha)
_Matx_double_1_4_all = _hog._Matx_double_1_4_all

def _Matx_double_1_4_zeros():
    return _hog._Matx_double_1_4_zeros()
_Matx_double_1_4_zeros = _hog._Matx_double_1_4_zeros

def _Matx_double_1_4_ones():
    return _hog._Matx_double_1_4_ones()
_Matx_double_1_4_ones = _hog._Matx_double_1_4_ones

def _Matx_double_1_4_eye():
    return _hog._Matx_double_1_4_eye()
_Matx_double_1_4_eye = _hog._Matx_double_1_4_eye

def _Matx_double_1_4_randu(a, b):
    return _hog._Matx_double_1_4_randu(a, b)
_Matx_double_1_4_randu = _hog._Matx_double_1_4_randu

def _Matx_double_1_4_randn(a, b):
    return _hog._Matx_double_1_4_randn(a, b)
_Matx_double_1_4_randn = _hog._Matx_double_1_4_randn


Matx14d = _Matx_double_1_4

class _Matx_float_1_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_1_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_1_6, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_1_6_rows
    cols = _hog._Matx_float_1_6_cols
    channels = _hog._Matx_float_1_6_channels
    shortdim = _hog._Matx_float_1_6_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_1_6_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_1_6_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_1_6_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_1_6_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_1_6_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_1_6_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_1_6_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_1_6_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_1_6_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_1_6_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_1_6_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_1_6_randn)

    def dot(self, v):
        return _hog._Matx_float_1_6_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_1_6_ddot(self, v)

    def t(self):
        return _hog._Matx_float_1_6_t(self)

    def mul(self, a):
        return _hog._Matx_float_1_6_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_1_6_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_1_6___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_1_6_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_1_6_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_1_6_val_get, _hog._Matx_float_1_6_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_1_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_1_6___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_1_6
    __del__ = lambda self: None
_Matx_float_1_6_swigregister = _hog._Matx_float_1_6_swigregister
_Matx_float_1_6_swigregister(_Matx_float_1_6)

def _Matx_float_1_6_all(alpha):
    return _hog._Matx_float_1_6_all(alpha)
_Matx_float_1_6_all = _hog._Matx_float_1_6_all

def _Matx_float_1_6_zeros():
    return _hog._Matx_float_1_6_zeros()
_Matx_float_1_6_zeros = _hog._Matx_float_1_6_zeros

def _Matx_float_1_6_ones():
    return _hog._Matx_float_1_6_ones()
_Matx_float_1_6_ones = _hog._Matx_float_1_6_ones

def _Matx_float_1_6_eye():
    return _hog._Matx_float_1_6_eye()
_Matx_float_1_6_eye = _hog._Matx_float_1_6_eye

def _Matx_float_1_6_randu(a, b):
    return _hog._Matx_float_1_6_randu(a, b)
_Matx_float_1_6_randu = _hog._Matx_float_1_6_randu

def _Matx_float_1_6_randn(a, b):
    return _hog._Matx_float_1_6_randn(a, b)
_Matx_float_1_6_randn = _hog._Matx_float_1_6_randn


Matx16f = _Matx_float_1_6

class _Matx_double_1_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_1_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_1_6, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_1_6_rows
    cols = _hog._Matx_double_1_6_cols
    channels = _hog._Matx_double_1_6_channels
    shortdim = _hog._Matx_double_1_6_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_1_6_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_1_6_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_1_6_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_1_6_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_1_6_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_1_6_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_1_6_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_1_6_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_1_6_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_1_6_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_1_6_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_1_6_randn)

    def dot(self, v):
        return _hog._Matx_double_1_6_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_1_6_ddot(self, v)

    def t(self):
        return _hog._Matx_double_1_6_t(self)

    def mul(self, a):
        return _hog._Matx_double_1_6_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_1_6_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_1_6___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_1_6_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_1_6_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_1_6_val_get, _hog._Matx_double_1_6_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_1_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_1_6___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_1_6
    __del__ = lambda self: None
_Matx_double_1_6_swigregister = _hog._Matx_double_1_6_swigregister
_Matx_double_1_6_swigregister(_Matx_double_1_6)

def _Matx_double_1_6_all(alpha):
    return _hog._Matx_double_1_6_all(alpha)
_Matx_double_1_6_all = _hog._Matx_double_1_6_all

def _Matx_double_1_6_zeros():
    return _hog._Matx_double_1_6_zeros()
_Matx_double_1_6_zeros = _hog._Matx_double_1_6_zeros

def _Matx_double_1_6_ones():
    return _hog._Matx_double_1_6_ones()
_Matx_double_1_6_ones = _hog._Matx_double_1_6_ones

def _Matx_double_1_6_eye():
    return _hog._Matx_double_1_6_eye()
_Matx_double_1_6_eye = _hog._Matx_double_1_6_eye

def _Matx_double_1_6_randu(a, b):
    return _hog._Matx_double_1_6_randu(a, b)
_Matx_double_1_6_randu = _hog._Matx_double_1_6_randu

def _Matx_double_1_6_randn(a, b):
    return _hog._Matx_double_1_6_randn(a, b)
_Matx_double_1_6_randn = _hog._Matx_double_1_6_randn


Matx16d = _Matx_double_1_6

class _Matx_float_2_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_2_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_2_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_2_2_rows
    cols = _hog._Matx_float_2_2_cols
    channels = _hog._Matx_float_2_2_channels
    shortdim = _hog._Matx_float_2_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_2_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_2_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_2_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_2_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_2_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_2_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_2_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_2_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_2_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_2_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_2_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_2_2_randn)

    def dot(self, v):
        return _hog._Matx_float_2_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_2_2_ddot(self, v)

    def t(self):
        return _hog._Matx_float_2_2_t(self)

    def mul(self, a):
        return _hog._Matx_float_2_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_2_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_2_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_2_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_2_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_2_2_val_get, _hog._Matx_float_2_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_2_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_2_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_2_2
    __del__ = lambda self: None
_Matx_float_2_2_swigregister = _hog._Matx_float_2_2_swigregister
_Matx_float_2_2_swigregister(_Matx_float_2_2)

def _Matx_float_2_2_all(alpha):
    return _hog._Matx_float_2_2_all(alpha)
_Matx_float_2_2_all = _hog._Matx_float_2_2_all

def _Matx_float_2_2_zeros():
    return _hog._Matx_float_2_2_zeros()
_Matx_float_2_2_zeros = _hog._Matx_float_2_2_zeros

def _Matx_float_2_2_ones():
    return _hog._Matx_float_2_2_ones()
_Matx_float_2_2_ones = _hog._Matx_float_2_2_ones

def _Matx_float_2_2_eye():
    return _hog._Matx_float_2_2_eye()
_Matx_float_2_2_eye = _hog._Matx_float_2_2_eye

def _Matx_float_2_2_randu(a, b):
    return _hog._Matx_float_2_2_randu(a, b)
_Matx_float_2_2_randu = _hog._Matx_float_2_2_randu

def _Matx_float_2_2_randn(a, b):
    return _hog._Matx_float_2_2_randn(a, b)
_Matx_float_2_2_randn = _hog._Matx_float_2_2_randn


Matx22f = _Matx_float_2_2

class _Matx_double_2_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_2_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_2_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_2_2_rows
    cols = _hog._Matx_double_2_2_cols
    channels = _hog._Matx_double_2_2_channels
    shortdim = _hog._Matx_double_2_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_2_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_2_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_2_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_2_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_2_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_2_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_2_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_2_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_2_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_2_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_2_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_2_2_randn)

    def dot(self, v):
        return _hog._Matx_double_2_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_2_2_ddot(self, v)

    def t(self):
        return _hog._Matx_double_2_2_t(self)

    def mul(self, a):
        return _hog._Matx_double_2_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_2_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_2_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_2_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_2_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_2_2_val_get, _hog._Matx_double_2_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_2_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_2_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_2_2
    __del__ = lambda self: None
_Matx_double_2_2_swigregister = _hog._Matx_double_2_2_swigregister
_Matx_double_2_2_swigregister(_Matx_double_2_2)

def _Matx_double_2_2_all(alpha):
    return _hog._Matx_double_2_2_all(alpha)
_Matx_double_2_2_all = _hog._Matx_double_2_2_all

def _Matx_double_2_2_zeros():
    return _hog._Matx_double_2_2_zeros()
_Matx_double_2_2_zeros = _hog._Matx_double_2_2_zeros

def _Matx_double_2_2_ones():
    return _hog._Matx_double_2_2_ones()
_Matx_double_2_2_ones = _hog._Matx_double_2_2_ones

def _Matx_double_2_2_eye():
    return _hog._Matx_double_2_2_eye()
_Matx_double_2_2_eye = _hog._Matx_double_2_2_eye

def _Matx_double_2_2_randu(a, b):
    return _hog._Matx_double_2_2_randu(a, b)
_Matx_double_2_2_randu = _hog._Matx_double_2_2_randu

def _Matx_double_2_2_randn(a, b):
    return _hog._Matx_double_2_2_randn(a, b)
_Matx_double_2_2_randn = _hog._Matx_double_2_2_randn


Matx22d = _Matx_double_2_2

class _Matx_float_2_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_2_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_2_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_2_3_rows
    cols = _hog._Matx_float_2_3_cols
    channels = _hog._Matx_float_2_3_channels
    shortdim = _hog._Matx_float_2_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_2_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_2_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_2_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_2_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_2_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_2_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_2_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_2_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_2_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_2_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_2_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_2_3_randn)

    def dot(self, v):
        return _hog._Matx_float_2_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_2_3_ddot(self, v)

    def t(self):
        return _hog._Matx_float_2_3_t(self)

    def mul(self, a):
        return _hog._Matx_float_2_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_2_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_2_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_2_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_2_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_2_3_val_get, _hog._Matx_float_2_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_2_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_2_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_2_3
    __del__ = lambda self: None
_Matx_float_2_3_swigregister = _hog._Matx_float_2_3_swigregister
_Matx_float_2_3_swigregister(_Matx_float_2_3)

def _Matx_float_2_3_all(alpha):
    return _hog._Matx_float_2_3_all(alpha)
_Matx_float_2_3_all = _hog._Matx_float_2_3_all

def _Matx_float_2_3_zeros():
    return _hog._Matx_float_2_3_zeros()
_Matx_float_2_3_zeros = _hog._Matx_float_2_3_zeros

def _Matx_float_2_3_ones():
    return _hog._Matx_float_2_3_ones()
_Matx_float_2_3_ones = _hog._Matx_float_2_3_ones

def _Matx_float_2_3_eye():
    return _hog._Matx_float_2_3_eye()
_Matx_float_2_3_eye = _hog._Matx_float_2_3_eye

def _Matx_float_2_3_randu(a, b):
    return _hog._Matx_float_2_3_randu(a, b)
_Matx_float_2_3_randu = _hog._Matx_float_2_3_randu

def _Matx_float_2_3_randn(a, b):
    return _hog._Matx_float_2_3_randn(a, b)
_Matx_float_2_3_randn = _hog._Matx_float_2_3_randn


Matx23f = _Matx_float_2_3

class _Matx_double_2_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_2_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_2_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_2_3_rows
    cols = _hog._Matx_double_2_3_cols
    channels = _hog._Matx_double_2_3_channels
    shortdim = _hog._Matx_double_2_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_2_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_2_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_2_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_2_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_2_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_2_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_2_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_2_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_2_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_2_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_2_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_2_3_randn)

    def dot(self, v):
        return _hog._Matx_double_2_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_2_3_ddot(self, v)

    def t(self):
        return _hog._Matx_double_2_3_t(self)

    def mul(self, a):
        return _hog._Matx_double_2_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_2_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_2_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_2_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_2_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_2_3_val_get, _hog._Matx_double_2_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_2_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_2_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_2_3
    __del__ = lambda self: None
_Matx_double_2_3_swigregister = _hog._Matx_double_2_3_swigregister
_Matx_double_2_3_swigregister(_Matx_double_2_3)

def _Matx_double_2_3_all(alpha):
    return _hog._Matx_double_2_3_all(alpha)
_Matx_double_2_3_all = _hog._Matx_double_2_3_all

def _Matx_double_2_3_zeros():
    return _hog._Matx_double_2_3_zeros()
_Matx_double_2_3_zeros = _hog._Matx_double_2_3_zeros

def _Matx_double_2_3_ones():
    return _hog._Matx_double_2_3_ones()
_Matx_double_2_3_ones = _hog._Matx_double_2_3_ones

def _Matx_double_2_3_eye():
    return _hog._Matx_double_2_3_eye()
_Matx_double_2_3_eye = _hog._Matx_double_2_3_eye

def _Matx_double_2_3_randu(a, b):
    return _hog._Matx_double_2_3_randu(a, b)
_Matx_double_2_3_randu = _hog._Matx_double_2_3_randu

def _Matx_double_2_3_randn(a, b):
    return _hog._Matx_double_2_3_randn(a, b)
_Matx_double_2_3_randn = _hog._Matx_double_2_3_randn


Matx23d = _Matx_double_2_3

class _Matx_float_3_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_3_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_3_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_3_2_rows
    cols = _hog._Matx_float_3_2_cols
    channels = _hog._Matx_float_3_2_channels
    shortdim = _hog._Matx_float_3_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_3_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_3_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_3_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_3_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_3_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_3_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_3_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_3_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_3_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_3_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_3_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_3_2_randn)

    def dot(self, v):
        return _hog._Matx_float_3_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_3_2_ddot(self, v)

    def t(self):
        return _hog._Matx_float_3_2_t(self)

    def mul(self, a):
        return _hog._Matx_float_3_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_3_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_3_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_3_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_3_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_3_2_val_get, _hog._Matx_float_3_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_3_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_3_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_3_2
    __del__ = lambda self: None
_Matx_float_3_2_swigregister = _hog._Matx_float_3_2_swigregister
_Matx_float_3_2_swigregister(_Matx_float_3_2)

def _Matx_float_3_2_all(alpha):
    return _hog._Matx_float_3_2_all(alpha)
_Matx_float_3_2_all = _hog._Matx_float_3_2_all

def _Matx_float_3_2_zeros():
    return _hog._Matx_float_3_2_zeros()
_Matx_float_3_2_zeros = _hog._Matx_float_3_2_zeros

def _Matx_float_3_2_ones():
    return _hog._Matx_float_3_2_ones()
_Matx_float_3_2_ones = _hog._Matx_float_3_2_ones

def _Matx_float_3_2_eye():
    return _hog._Matx_float_3_2_eye()
_Matx_float_3_2_eye = _hog._Matx_float_3_2_eye

def _Matx_float_3_2_randu(a, b):
    return _hog._Matx_float_3_2_randu(a, b)
_Matx_float_3_2_randu = _hog._Matx_float_3_2_randu

def _Matx_float_3_2_randn(a, b):
    return _hog._Matx_float_3_2_randn(a, b)
_Matx_float_3_2_randn = _hog._Matx_float_3_2_randn


Matx32f = _Matx_float_3_2

class _Matx_double_3_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_3_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_3_2, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_3_2_rows
    cols = _hog._Matx_double_3_2_cols
    channels = _hog._Matx_double_3_2_channels
    shortdim = _hog._Matx_double_3_2_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_3_2_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_3_2_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_3_2_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_3_2_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_3_2_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_3_2_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_3_2_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_3_2_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_3_2_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_3_2_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_3_2_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_3_2_randn)

    def dot(self, v):
        return _hog._Matx_double_3_2_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_3_2_ddot(self, v)

    def t(self):
        return _hog._Matx_double_3_2_t(self)

    def mul(self, a):
        return _hog._Matx_double_3_2_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_3_2_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_3_2___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_3_2_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_3_2_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_3_2_val_get, _hog._Matx_double_3_2_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_3_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_3_2___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_3_2
    __del__ = lambda self: None
_Matx_double_3_2_swigregister = _hog._Matx_double_3_2_swigregister
_Matx_double_3_2_swigregister(_Matx_double_3_2)

def _Matx_double_3_2_all(alpha):
    return _hog._Matx_double_3_2_all(alpha)
_Matx_double_3_2_all = _hog._Matx_double_3_2_all

def _Matx_double_3_2_zeros():
    return _hog._Matx_double_3_2_zeros()
_Matx_double_3_2_zeros = _hog._Matx_double_3_2_zeros

def _Matx_double_3_2_ones():
    return _hog._Matx_double_3_2_ones()
_Matx_double_3_2_ones = _hog._Matx_double_3_2_ones

def _Matx_double_3_2_eye():
    return _hog._Matx_double_3_2_eye()
_Matx_double_3_2_eye = _hog._Matx_double_3_2_eye

def _Matx_double_3_2_randu(a, b):
    return _hog._Matx_double_3_2_randu(a, b)
_Matx_double_3_2_randu = _hog._Matx_double_3_2_randu

def _Matx_double_3_2_randn(a, b):
    return _hog._Matx_double_3_2_randn(a, b)
_Matx_double_3_2_randn = _hog._Matx_double_3_2_randn


Matx32d = _Matx_double_3_2

class _Matx_float_3_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_3_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_3_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_3_3_rows
    cols = _hog._Matx_float_3_3_cols
    channels = _hog._Matx_float_3_3_channels
    shortdim = _hog._Matx_float_3_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_3_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_3_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_3_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_3_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_3_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_3_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_3_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_3_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_3_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_3_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_3_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_3_3_randn)

    def dot(self, v):
        return _hog._Matx_float_3_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_3_3_ddot(self, v)

    def t(self):
        return _hog._Matx_float_3_3_t(self)

    def mul(self, a):
        return _hog._Matx_float_3_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_3_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_3_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_3_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_3_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_3_3_val_get, _hog._Matx_float_3_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_3_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_3_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_3_3
    __del__ = lambda self: None
_Matx_float_3_3_swigregister = _hog._Matx_float_3_3_swigregister
_Matx_float_3_3_swigregister(_Matx_float_3_3)

def _Matx_float_3_3_all(alpha):
    return _hog._Matx_float_3_3_all(alpha)
_Matx_float_3_3_all = _hog._Matx_float_3_3_all

def _Matx_float_3_3_zeros():
    return _hog._Matx_float_3_3_zeros()
_Matx_float_3_3_zeros = _hog._Matx_float_3_3_zeros

def _Matx_float_3_3_ones():
    return _hog._Matx_float_3_3_ones()
_Matx_float_3_3_ones = _hog._Matx_float_3_3_ones

def _Matx_float_3_3_eye():
    return _hog._Matx_float_3_3_eye()
_Matx_float_3_3_eye = _hog._Matx_float_3_3_eye

def _Matx_float_3_3_randu(a, b):
    return _hog._Matx_float_3_3_randu(a, b)
_Matx_float_3_3_randu = _hog._Matx_float_3_3_randu

def _Matx_float_3_3_randn(a, b):
    return _hog._Matx_float_3_3_randn(a, b)
_Matx_float_3_3_randn = _hog._Matx_float_3_3_randn


Matx33f = _Matx_float_3_3

class _Matx_double_3_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_3_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_3_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_3_3_rows
    cols = _hog._Matx_double_3_3_cols
    channels = _hog._Matx_double_3_3_channels
    shortdim = _hog._Matx_double_3_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_3_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_3_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_3_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_3_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_3_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_3_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_3_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_3_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_3_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_3_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_3_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_3_3_randn)

    def dot(self, v):
        return _hog._Matx_double_3_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_3_3_ddot(self, v)

    def t(self):
        return _hog._Matx_double_3_3_t(self)

    def mul(self, a):
        return _hog._Matx_double_3_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_3_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_3_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_3_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_3_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_3_3_val_get, _hog._Matx_double_3_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_3_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_3_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_3_3
    __del__ = lambda self: None
_Matx_double_3_3_swigregister = _hog._Matx_double_3_3_swigregister
_Matx_double_3_3_swigregister(_Matx_double_3_3)

def _Matx_double_3_3_all(alpha):
    return _hog._Matx_double_3_3_all(alpha)
_Matx_double_3_3_all = _hog._Matx_double_3_3_all

def _Matx_double_3_3_zeros():
    return _hog._Matx_double_3_3_zeros()
_Matx_double_3_3_zeros = _hog._Matx_double_3_3_zeros

def _Matx_double_3_3_ones():
    return _hog._Matx_double_3_3_ones()
_Matx_double_3_3_ones = _hog._Matx_double_3_3_ones

def _Matx_double_3_3_eye():
    return _hog._Matx_double_3_3_eye()
_Matx_double_3_3_eye = _hog._Matx_double_3_3_eye

def _Matx_double_3_3_randu(a, b):
    return _hog._Matx_double_3_3_randu(a, b)
_Matx_double_3_3_randu = _hog._Matx_double_3_3_randu

def _Matx_double_3_3_randn(a, b):
    return _hog._Matx_double_3_3_randn(a, b)
_Matx_double_3_3_randn = _hog._Matx_double_3_3_randn


Matx33d = _Matx_double_3_3

class _Matx_float_3_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_3_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_3_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_3_4_rows
    cols = _hog._Matx_float_3_4_cols
    channels = _hog._Matx_float_3_4_channels
    shortdim = _hog._Matx_float_3_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_3_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_3_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_3_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_3_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_3_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_3_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_3_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_3_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_3_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_3_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_3_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_3_4_randn)

    def dot(self, v):
        return _hog._Matx_float_3_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_3_4_ddot(self, v)

    def t(self):
        return _hog._Matx_float_3_4_t(self)

    def mul(self, a):
        return _hog._Matx_float_3_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_3_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_3_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_3_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_3_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_3_4_val_get, _hog._Matx_float_3_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_3_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_3_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_3_4
    __del__ = lambda self: None
_Matx_float_3_4_swigregister = _hog._Matx_float_3_4_swigregister
_Matx_float_3_4_swigregister(_Matx_float_3_4)

def _Matx_float_3_4_all(alpha):
    return _hog._Matx_float_3_4_all(alpha)
_Matx_float_3_4_all = _hog._Matx_float_3_4_all

def _Matx_float_3_4_zeros():
    return _hog._Matx_float_3_4_zeros()
_Matx_float_3_4_zeros = _hog._Matx_float_3_4_zeros

def _Matx_float_3_4_ones():
    return _hog._Matx_float_3_4_ones()
_Matx_float_3_4_ones = _hog._Matx_float_3_4_ones

def _Matx_float_3_4_eye():
    return _hog._Matx_float_3_4_eye()
_Matx_float_3_4_eye = _hog._Matx_float_3_4_eye

def _Matx_float_3_4_randu(a, b):
    return _hog._Matx_float_3_4_randu(a, b)
_Matx_float_3_4_randu = _hog._Matx_float_3_4_randu

def _Matx_float_3_4_randn(a, b):
    return _hog._Matx_float_3_4_randn(a, b)
_Matx_float_3_4_randn = _hog._Matx_float_3_4_randn


Matx34f = _Matx_float_3_4

class _Matx_double_3_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_3_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_3_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_3_4_rows
    cols = _hog._Matx_double_3_4_cols
    channels = _hog._Matx_double_3_4_channels
    shortdim = _hog._Matx_double_3_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_3_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_3_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_3_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_3_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_3_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_3_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_3_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_3_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_3_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_3_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_3_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_3_4_randn)

    def dot(self, v):
        return _hog._Matx_double_3_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_3_4_ddot(self, v)

    def t(self):
        return _hog._Matx_double_3_4_t(self)

    def mul(self, a):
        return _hog._Matx_double_3_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_3_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_3_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_3_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_3_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_3_4_val_get, _hog._Matx_double_3_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_3_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_3_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_3_4
    __del__ = lambda self: None
_Matx_double_3_4_swigregister = _hog._Matx_double_3_4_swigregister
_Matx_double_3_4_swigregister(_Matx_double_3_4)

def _Matx_double_3_4_all(alpha):
    return _hog._Matx_double_3_4_all(alpha)
_Matx_double_3_4_all = _hog._Matx_double_3_4_all

def _Matx_double_3_4_zeros():
    return _hog._Matx_double_3_4_zeros()
_Matx_double_3_4_zeros = _hog._Matx_double_3_4_zeros

def _Matx_double_3_4_ones():
    return _hog._Matx_double_3_4_ones()
_Matx_double_3_4_ones = _hog._Matx_double_3_4_ones

def _Matx_double_3_4_eye():
    return _hog._Matx_double_3_4_eye()
_Matx_double_3_4_eye = _hog._Matx_double_3_4_eye

def _Matx_double_3_4_randu(a, b):
    return _hog._Matx_double_3_4_randu(a, b)
_Matx_double_3_4_randu = _hog._Matx_double_3_4_randu

def _Matx_double_3_4_randn(a, b):
    return _hog._Matx_double_3_4_randn(a, b)
_Matx_double_3_4_randn = _hog._Matx_double_3_4_randn


Matx34d = _Matx_double_3_4

class _Matx_float_4_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_4_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_4_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_4_3_rows
    cols = _hog._Matx_float_4_3_cols
    channels = _hog._Matx_float_4_3_channels
    shortdim = _hog._Matx_float_4_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_4_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_4_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_4_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_4_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_4_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_4_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_4_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_4_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_4_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_4_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_4_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_4_3_randn)

    def dot(self, v):
        return _hog._Matx_float_4_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_4_3_ddot(self, v)

    def t(self):
        return _hog._Matx_float_4_3_t(self)

    def mul(self, a):
        return _hog._Matx_float_4_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_4_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_4_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_4_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_4_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_4_3_val_get, _hog._Matx_float_4_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_4_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_4_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_4_3
    __del__ = lambda self: None
_Matx_float_4_3_swigregister = _hog._Matx_float_4_3_swigregister
_Matx_float_4_3_swigregister(_Matx_float_4_3)

def _Matx_float_4_3_all(alpha):
    return _hog._Matx_float_4_3_all(alpha)
_Matx_float_4_3_all = _hog._Matx_float_4_3_all

def _Matx_float_4_3_zeros():
    return _hog._Matx_float_4_3_zeros()
_Matx_float_4_3_zeros = _hog._Matx_float_4_3_zeros

def _Matx_float_4_3_ones():
    return _hog._Matx_float_4_3_ones()
_Matx_float_4_3_ones = _hog._Matx_float_4_3_ones

def _Matx_float_4_3_eye():
    return _hog._Matx_float_4_3_eye()
_Matx_float_4_3_eye = _hog._Matx_float_4_3_eye

def _Matx_float_4_3_randu(a, b):
    return _hog._Matx_float_4_3_randu(a, b)
_Matx_float_4_3_randu = _hog._Matx_float_4_3_randu

def _Matx_float_4_3_randn(a, b):
    return _hog._Matx_float_4_3_randn(a, b)
_Matx_float_4_3_randn = _hog._Matx_float_4_3_randn


Matx43f = _Matx_float_4_3

class _Matx_double_4_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_4_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_4_3, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_4_3_rows
    cols = _hog._Matx_double_4_3_cols
    channels = _hog._Matx_double_4_3_channels
    shortdim = _hog._Matx_double_4_3_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_4_3_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_4_3_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_4_3_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_4_3_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_4_3_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_4_3_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_4_3_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_4_3_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_4_3_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_4_3_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_4_3_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_4_3_randn)

    def dot(self, v):
        return _hog._Matx_double_4_3_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_4_3_ddot(self, v)

    def t(self):
        return _hog._Matx_double_4_3_t(self)

    def mul(self, a):
        return _hog._Matx_double_4_3_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_4_3_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_4_3___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_4_3_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_4_3_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_4_3_val_get, _hog._Matx_double_4_3_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_4_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_4_3___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_4_3
    __del__ = lambda self: None
_Matx_double_4_3_swigregister = _hog._Matx_double_4_3_swigregister
_Matx_double_4_3_swigregister(_Matx_double_4_3)

def _Matx_double_4_3_all(alpha):
    return _hog._Matx_double_4_3_all(alpha)
_Matx_double_4_3_all = _hog._Matx_double_4_3_all

def _Matx_double_4_3_zeros():
    return _hog._Matx_double_4_3_zeros()
_Matx_double_4_3_zeros = _hog._Matx_double_4_3_zeros

def _Matx_double_4_3_ones():
    return _hog._Matx_double_4_3_ones()
_Matx_double_4_3_ones = _hog._Matx_double_4_3_ones

def _Matx_double_4_3_eye():
    return _hog._Matx_double_4_3_eye()
_Matx_double_4_3_eye = _hog._Matx_double_4_3_eye

def _Matx_double_4_3_randu(a, b):
    return _hog._Matx_double_4_3_randu(a, b)
_Matx_double_4_3_randu = _hog._Matx_double_4_3_randu

def _Matx_double_4_3_randn(a, b):
    return _hog._Matx_double_4_3_randn(a, b)
_Matx_double_4_3_randn = _hog._Matx_double_4_3_randn


Matx43d = _Matx_double_4_3

class _Matx_float_4_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_4_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_4_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_4_4_rows
    cols = _hog._Matx_float_4_4_cols
    channels = _hog._Matx_float_4_4_channels
    shortdim = _hog._Matx_float_4_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_4_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_4_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_4_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_4_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_4_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_4_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_4_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_4_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_4_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_4_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_4_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_4_4_randn)

    def dot(self, v):
        return _hog._Matx_float_4_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_4_4_ddot(self, v)

    def t(self):
        return _hog._Matx_float_4_4_t(self)

    def mul(self, a):
        return _hog._Matx_float_4_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_4_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_4_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_4_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_4_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_4_4_val_get, _hog._Matx_float_4_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_4_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_4_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_4_4
    __del__ = lambda self: None
_Matx_float_4_4_swigregister = _hog._Matx_float_4_4_swigregister
_Matx_float_4_4_swigregister(_Matx_float_4_4)

def _Matx_float_4_4_all(alpha):
    return _hog._Matx_float_4_4_all(alpha)
_Matx_float_4_4_all = _hog._Matx_float_4_4_all

def _Matx_float_4_4_zeros():
    return _hog._Matx_float_4_4_zeros()
_Matx_float_4_4_zeros = _hog._Matx_float_4_4_zeros

def _Matx_float_4_4_ones():
    return _hog._Matx_float_4_4_ones()
_Matx_float_4_4_ones = _hog._Matx_float_4_4_ones

def _Matx_float_4_4_eye():
    return _hog._Matx_float_4_4_eye()
_Matx_float_4_4_eye = _hog._Matx_float_4_4_eye

def _Matx_float_4_4_randu(a, b):
    return _hog._Matx_float_4_4_randu(a, b)
_Matx_float_4_4_randu = _hog._Matx_float_4_4_randu

def _Matx_float_4_4_randn(a, b):
    return _hog._Matx_float_4_4_randn(a, b)
_Matx_float_4_4_randn = _hog._Matx_float_4_4_randn


Matx44f = _Matx_float_4_4

class _Matx_double_4_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_4_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_4_4, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_4_4_rows
    cols = _hog._Matx_double_4_4_cols
    channels = _hog._Matx_double_4_4_channels
    shortdim = _hog._Matx_double_4_4_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_4_4_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_4_4_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_4_4_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_4_4_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_4_4_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_4_4_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_4_4_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_4_4_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_4_4_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_4_4_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_4_4_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_4_4_randn)

    def dot(self, v):
        return _hog._Matx_double_4_4_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_4_4_ddot(self, v)

    def t(self):
        return _hog._Matx_double_4_4_t(self)

    def mul(self, a):
        return _hog._Matx_double_4_4_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_4_4_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_4_4___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_4_4_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_4_4_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_4_4_val_get, _hog._Matx_double_4_4_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_4_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_4_4___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_4_4
    __del__ = lambda self: None
_Matx_double_4_4_swigregister = _hog._Matx_double_4_4_swigregister
_Matx_double_4_4_swigregister(_Matx_double_4_4)

def _Matx_double_4_4_all(alpha):
    return _hog._Matx_double_4_4_all(alpha)
_Matx_double_4_4_all = _hog._Matx_double_4_4_all

def _Matx_double_4_4_zeros():
    return _hog._Matx_double_4_4_zeros()
_Matx_double_4_4_zeros = _hog._Matx_double_4_4_zeros

def _Matx_double_4_4_ones():
    return _hog._Matx_double_4_4_ones()
_Matx_double_4_4_ones = _hog._Matx_double_4_4_ones

def _Matx_double_4_4_eye():
    return _hog._Matx_double_4_4_eye()
_Matx_double_4_4_eye = _hog._Matx_double_4_4_eye

def _Matx_double_4_4_randu(a, b):
    return _hog._Matx_double_4_4_randu(a, b)
_Matx_double_4_4_randu = _hog._Matx_double_4_4_randu

def _Matx_double_4_4_randn(a, b):
    return _hog._Matx_double_4_4_randn(a, b)
_Matx_double_4_4_randn = _hog._Matx_double_4_4_randn


Matx44d = _Matx_double_4_4

class _Matx_float_6_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_6_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_6_6, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_float_6_6_rows
    cols = _hog._Matx_float_6_6_cols
    channels = _hog._Matx_float_6_6_channels
    shortdim = _hog._Matx_float_6_6_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_float_6_6_all
    if _newclass:
        all = staticmethod(_hog._Matx_float_6_6_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_float_6_6_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_float_6_6_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_float_6_6_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_float_6_6_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_float_6_6_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_float_6_6_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_float_6_6_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_float_6_6_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_float_6_6_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_float_6_6_randn)

    def dot(self, v):
        return _hog._Matx_float_6_6_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_float_6_6_ddot(self, v)

    def t(self):
        return _hog._Matx_float_6_6_t(self)

    def mul(self, a):
        return _hog._Matx_float_6_6_mul(self, a)

    def div(self, a):
        return _hog._Matx_float_6_6_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_float_6_6___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_float_6_6_val_set
    __swig_getmethods__["val"] = _hog._Matx_float_6_6_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_float_6_6_val_get, _hog._Matx_float_6_6_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_float_6_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_float_6_6___str__(self)
    __swig_destroy__ = _hog.delete__Matx_float_6_6
    __del__ = lambda self: None
_Matx_float_6_6_swigregister = _hog._Matx_float_6_6_swigregister
_Matx_float_6_6_swigregister(_Matx_float_6_6)

def _Matx_float_6_6_all(alpha):
    return _hog._Matx_float_6_6_all(alpha)
_Matx_float_6_6_all = _hog._Matx_float_6_6_all

def _Matx_float_6_6_zeros():
    return _hog._Matx_float_6_6_zeros()
_Matx_float_6_6_zeros = _hog._Matx_float_6_6_zeros

def _Matx_float_6_6_ones():
    return _hog._Matx_float_6_6_ones()
_Matx_float_6_6_ones = _hog._Matx_float_6_6_ones

def _Matx_float_6_6_eye():
    return _hog._Matx_float_6_6_eye()
_Matx_float_6_6_eye = _hog._Matx_float_6_6_eye

def _Matx_float_6_6_randu(a, b):
    return _hog._Matx_float_6_6_randu(a, b)
_Matx_float_6_6_randu = _hog._Matx_float_6_6_randu

def _Matx_float_6_6_randn(a, b):
    return _hog._Matx_float_6_6_randn(a, b)
_Matx_float_6_6_randn = _hog._Matx_float_6_6_randn


Matx66f = _Matx_float_6_6

class _Matx_double_6_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_6_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_6_6, name)
    __repr__ = _swig_repr
    rows = _hog._Matx_double_6_6_rows
    cols = _hog._Matx_double_6_6_cols
    channels = _hog._Matx_double_6_6_channels
    shortdim = _hog._Matx_double_6_6_shortdim
    __swig_getmethods__["all"] = lambda x: _hog._Matx_double_6_6_all
    if _newclass:
        all = staticmethod(_hog._Matx_double_6_6_all)
    __swig_getmethods__["zeros"] = lambda x: _hog._Matx_double_6_6_zeros
    if _newclass:
        zeros = staticmethod(_hog._Matx_double_6_6_zeros)
    __swig_getmethods__["ones"] = lambda x: _hog._Matx_double_6_6_ones
    if _newclass:
        ones = staticmethod(_hog._Matx_double_6_6_ones)
    __swig_getmethods__["eye"] = lambda x: _hog._Matx_double_6_6_eye
    if _newclass:
        eye = staticmethod(_hog._Matx_double_6_6_eye)
    __swig_getmethods__["randu"] = lambda x: _hog._Matx_double_6_6_randu
    if _newclass:
        randu = staticmethod(_hog._Matx_double_6_6_randu)
    __swig_getmethods__["randn"] = lambda x: _hog._Matx_double_6_6_randn
    if _newclass:
        randn = staticmethod(_hog._Matx_double_6_6_randn)

    def dot(self, v):
        return _hog._Matx_double_6_6_dot(self, v)

    def ddot(self, v):
        return _hog._Matx_double_6_6_ddot(self, v)

    def t(self):
        return _hog._Matx_double_6_6_t(self)

    def mul(self, a):
        return _hog._Matx_double_6_6_mul(self, a)

    def div(self, a):
        return _hog._Matx_double_6_6_div(self, a)

    def __call__(self, i, j):
        return _hog._Matx_double_6_6___call__(self, i, j)
    __swig_setmethods__["val"] = _hog._Matx_double_6_6_val_set
    __swig_getmethods__["val"] = _hog._Matx_double_6_6_val_get
    if _newclass:
        val = _swig_property(_hog._Matx_double_6_6_val_get, _hog._Matx_double_6_6_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _hog.new__Matx_double_6_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _hog._Matx_double_6_6___str__(self)
    __swig_destroy__ = _hog.delete__Matx_double_6_6
    __del__ = lambda self: None
_Matx_double_6_6_swigregister = _hog._Matx_double_6_6_swigregister
_Matx_double_6_6_swigregister(_Matx_double_6_6)

def _Matx_double_6_6_all(alpha):
    return _hog._Matx_double_6_6_all(alpha)
_Matx_double_6_6_all = _hog._Matx_double_6_6_all

def _Matx_double_6_6_zeros():
    return _hog._Matx_double_6_6_zeros()
_Matx_double_6_6_zeros = _hog._Matx_double_6_6_zeros

def _Matx_double_6_6_ones():
    return _hog._Matx_double_6_6_ones()
_Matx_double_6_6_ones = _hog._Matx_double_6_6_ones

def _Matx_double_6_6_eye():
    return _hog._Matx_double_6_6_eye()
_Matx_double_6_6_eye = _hog._Matx_double_6_6_eye

def _Matx_double_6_6_randu(a, b):
    return _hog._Matx_double_6_6_randu(a, b)
_Matx_double_6_6_randu = _hog._Matx_double_6_6_randu

def _Matx_double_6_6_randn(a, b):
    return _hog._Matx_double_6_6_randn(a, b)
_Matx_double_6_6_randn = _hog._Matx_double_6_6_randn


Matx66d = _Matx_double_6_6

class _Point__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Point__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _hog._Point__int_dot(self, pt)

    def ddot(self, pt):
        return _hog._Point__int_ddot(self, pt)

    def cross(self, pt):
        return _hog._Point__int_cross(self, pt)
    __swig_setmethods__["x"] = _hog._Point__int_x_set
    __swig_getmethods__["x"] = _hog._Point__int_x_get
    if _newclass:
        x = _swig_property(_hog._Point__int_x_get, _hog._Point__int_x_set)
    __swig_setmethods__["y"] = _hog._Point__int_y_set
    __swig_getmethods__["y"] = _hog._Point__int_y_get
    if _newclass:
        y = _swig_property(_hog._Point__int_y_get, _hog._Point__int_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _hog._Point__int___str__(self)
    __swig_destroy__ = _hog.delete__Point__int
    __del__ = lambda self: None
_Point__int_swigregister = _hog._Point__int_swigregister
_Point__int_swigregister(_Point__int)


Point2i = _Point__int

class _Point__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Point__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _hog._Point__float_dot(self, pt)

    def ddot(self, pt):
        return _hog._Point__float_ddot(self, pt)

    def cross(self, pt):
        return _hog._Point__float_cross(self, pt)
    __swig_setmethods__["x"] = _hog._Point__float_x_set
    __swig_getmethods__["x"] = _hog._Point__float_x_get
    if _newclass:
        x = _swig_property(_hog._Point__float_x_get, _hog._Point__float_x_set)
    __swig_setmethods__["y"] = _hog._Point__float_y_set
    __swig_getmethods__["y"] = _hog._Point__float_y_get
    if _newclass:
        y = _swig_property(_hog._Point__float_y_get, _hog._Point__float_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _hog._Point__float___str__(self)
    __swig_destroy__ = _hog.delete__Point__float
    __del__ = lambda self: None
_Point__float_swigregister = _hog._Point__float_swigregister
_Point__float_swigregister(_Point__float)


Point2f = _Point__float

class _Point__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Point__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _hog._Point__double_dot(self, pt)

    def ddot(self, pt):
        return _hog._Point__double_ddot(self, pt)

    def cross(self, pt):
        return _hog._Point__double_cross(self, pt)
    __swig_setmethods__["x"] = _hog._Point__double_x_set
    __swig_getmethods__["x"] = _hog._Point__double_x_get
    if _newclass:
        x = _swig_property(_hog._Point__double_x_get, _hog._Point__double_x_set)
    __swig_setmethods__["y"] = _hog._Point__double_y_set
    __swig_getmethods__["y"] = _hog._Point__double_y_get
    if _newclass:
        y = _swig_property(_hog._Point__double_y_get, _hog._Point__double_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _hog._Point__double___str__(self)
    __swig_destroy__ = _hog.delete__Point__double
    __del__ = lambda self: None
_Point__double_swigregister = _hog._Point__double_swigregister
_Point__double_swigregister(_Point__double)


Point2d = _Point__double


Point = Point2i

class _Rect__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Rect__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _hog._Rect__int_tl(self)

    def br(self):
        return _hog._Rect__int_br(self)

    def size(self):
        return _hog._Rect__int_size(self)

    def area(self):
        return _hog._Rect__int_area(self)

    def contains(self, pt):
        return _hog._Rect__int_contains(self, pt)
    __swig_setmethods__["x"] = _hog._Rect__int_x_set
    __swig_getmethods__["x"] = _hog._Rect__int_x_get
    if _newclass:
        x = _swig_property(_hog._Rect__int_x_get, _hog._Rect__int_x_set)
    __swig_setmethods__["y"] = _hog._Rect__int_y_set
    __swig_getmethods__["y"] = _hog._Rect__int_y_get
    if _newclass:
        y = _swig_property(_hog._Rect__int_y_get, _hog._Rect__int_y_set)
    __swig_setmethods__["width"] = _hog._Rect__int_width_set
    __swig_getmethods__["width"] = _hog._Rect__int_width_get
    if _newclass:
        width = _swig_property(_hog._Rect__int_width_get, _hog._Rect__int_width_set)
    __swig_setmethods__["height"] = _hog._Rect__int_height_set
    __swig_getmethods__["height"] = _hog._Rect__int_height_get
    if _newclass:
        height = _swig_property(_hog._Rect__int_height_get, _hog._Rect__int_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _hog._Rect__int___str__(self)
    __swig_destroy__ = _hog.delete__Rect__int
    __del__ = lambda self: None
_Rect__int_swigregister = _hog._Rect__int_swigregister
_Rect__int_swigregister(_Rect__int)


Rect2i = _Rect__int

class _Rect__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Rect__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _hog._Rect__float_tl(self)

    def br(self):
        return _hog._Rect__float_br(self)

    def size(self):
        return _hog._Rect__float_size(self)

    def area(self):
        return _hog._Rect__float_area(self)

    def contains(self, pt):
        return _hog._Rect__float_contains(self, pt)
    __swig_setmethods__["x"] = _hog._Rect__float_x_set
    __swig_getmethods__["x"] = _hog._Rect__float_x_get
    if _newclass:
        x = _swig_property(_hog._Rect__float_x_get, _hog._Rect__float_x_set)
    __swig_setmethods__["y"] = _hog._Rect__float_y_set
    __swig_getmethods__["y"] = _hog._Rect__float_y_get
    if _newclass:
        y = _swig_property(_hog._Rect__float_y_get, _hog._Rect__float_y_set)
    __swig_setmethods__["width"] = _hog._Rect__float_width_set
    __swig_getmethods__["width"] = _hog._Rect__float_width_get
    if _newclass:
        width = _swig_property(_hog._Rect__float_width_get, _hog._Rect__float_width_set)
    __swig_setmethods__["height"] = _hog._Rect__float_height_set
    __swig_getmethods__["height"] = _hog._Rect__float_height_get
    if _newclass:
        height = _swig_property(_hog._Rect__float_height_get, _hog._Rect__float_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _hog._Rect__float___str__(self)
    __swig_destroy__ = _hog.delete__Rect__float
    __del__ = lambda self: None
_Rect__float_swigregister = _hog._Rect__float_swigregister
_Rect__float_swigregister(_Rect__float)


Rect2f = _Rect__float

class _Rect__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Rect__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _hog._Rect__double_tl(self)

    def br(self):
        return _hog._Rect__double_br(self)

    def size(self):
        return _hog._Rect__double_size(self)

    def area(self):
        return _hog._Rect__double_area(self)

    def contains(self, pt):
        return _hog._Rect__double_contains(self, pt)
    __swig_setmethods__["x"] = _hog._Rect__double_x_set
    __swig_getmethods__["x"] = _hog._Rect__double_x_get
    if _newclass:
        x = _swig_property(_hog._Rect__double_x_get, _hog._Rect__double_x_set)
    __swig_setmethods__["y"] = _hog._Rect__double_y_set
    __swig_getmethods__["y"] = _hog._Rect__double_y_get
    if _newclass:
        y = _swig_property(_hog._Rect__double_y_get, _hog._Rect__double_y_set)
    __swig_setmethods__["width"] = _hog._Rect__double_width_set
    __swig_getmethods__["width"] = _hog._Rect__double_width_get
    if _newclass:
        width = _swig_property(_hog._Rect__double_width_get, _hog._Rect__double_width_set)
    __swig_setmethods__["height"] = _hog._Rect__double_height_set
    __swig_getmethods__["height"] = _hog._Rect__double_height_get
    if _newclass:
        height = _swig_property(_hog._Rect__double_height_get, _hog._Rect__double_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _hog._Rect__double___str__(self)
    __swig_destroy__ = _hog.delete__Rect__double
    __del__ = lambda self: None
_Rect__double_swigregister = _hog._Rect__double_swigregister
_Rect__double_swigregister(_Rect__double)


Rect2d = _Rect__double


Rect = Rect2i

class _Scalar__double(_Vec_double_4):
    __swig_setmethods__ = {}
    for _s in [_Vec_double_4]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Scalar__double, name, value)
    __swig_getmethods__ = {}
    for _s in [_Vec_double_4]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Scalar__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Scalar__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["all"] = lambda x: _hog._Scalar__double_all
    if _newclass:
        all = staticmethod(_hog._Scalar__double_all)

    def mul(self, a, scale=1):
        return _hog._Scalar__double_mul(self, a, scale)

    def conj(self):
        return _hog._Scalar__double_conj(self)

    def isReal(self):
        return _hog._Scalar__double_isReal(self)

    def __iter__(self):
        return iter((self(0), self(1), self(2), self(3)))

    def __getitem__(self, key):
        if not isinstance(key, int):
            raise TypeError

        if key >= 4:
            raise IndexError

        return self(key)


    def __str__(self):
        return _hog._Scalar__double___str__(self)
    __swig_destroy__ = _hog.delete__Scalar__double
    __del__ = lambda self: None
_Scalar__double_swigregister = _hog._Scalar__double_swigregister
_Scalar__double_swigregister(_Scalar__double)

def _Scalar__double_all(v0):
    return _hog._Scalar__double_all(v0)
_Scalar__double_all = _hog._Scalar__double_all


Scalar4d = _Scalar__double


Scalar = Scalar4d

class _Size__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Size__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _hog._Size__int_area(self)
    __swig_setmethods__["width"] = _hog._Size__int_width_set
    __swig_getmethods__["width"] = _hog._Size__int_width_get
    if _newclass:
        width = _swig_property(_hog._Size__int_width_get, _hog._Size__int_width_set)
    __swig_setmethods__["height"] = _hog._Size__int_height_set
    __swig_getmethods__["height"] = _hog._Size__int_height_get
    if _newclass:
        height = _swig_property(_hog._Size__int_height_get, _hog._Size__int_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _hog._Size__int___str__(self)
    __swig_destroy__ = _hog.delete__Size__int
    __del__ = lambda self: None
_Size__int_swigregister = _hog._Size__int_swigregister
_Size__int_swigregister(_Size__int)


Size2i = _Size__int

class _Size__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Size__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _hog._Size__float_area(self)
    __swig_setmethods__["width"] = _hog._Size__float_width_set
    __swig_getmethods__["width"] = _hog._Size__float_width_get
    if _newclass:
        width = _swig_property(_hog._Size__float_width_get, _hog._Size__float_width_set)
    __swig_setmethods__["height"] = _hog._Size__float_height_set
    __swig_getmethods__["height"] = _hog._Size__float_height_get
    if _newclass:
        height = _swig_property(_hog._Size__float_height_get, _hog._Size__float_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _hog._Size__float___str__(self)
    __swig_destroy__ = _hog.delete__Size__float
    __del__ = lambda self: None
_Size__float_swigregister = _hog._Size__float_swigregister
_Size__float_swigregister(_Size__float)


Size2f = _Size__float

class _Size__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new__Size__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _hog._Size__double_area(self)
    __swig_setmethods__["width"] = _hog._Size__double_width_set
    __swig_getmethods__["width"] = _hog._Size__double_width_get
    if _newclass:
        width = _swig_property(_hog._Size__double_width_get, _hog._Size__double_width_set)
    __swig_setmethods__["height"] = _hog._Size__double_height_set
    __swig_getmethods__["height"] = _hog._Size__double_height_get
    if _newclass:
        height = _swig_property(_hog._Size__double_height_get, _hog._Size__double_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _hog._Size__double___str__(self)
    __swig_destroy__ = _hog.delete__Size__double
    __del__ = lambda self: None
_Size__double_swigregister = _hog._Size__double_swigregister
_Size__double_swigregister(_Size__double)


Size2d = _Size__double


Size = Size2i

class HOGDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HOGDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HOGDescriptor, name)
    __repr__ = _swig_repr
    L2Hys = _hog.HOGDescriptor_L2Hys
    DEFAULT_NLEVELS = _hog.HOGDescriptor_DEFAULT_NLEVELS

    def __init__(self, *args):
        this = _hog.new_HOGDescriptor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_HOGDescriptor
    __del__ = lambda self: None

    def getDescriptorSize(self):
        return _hog.HOGDescriptor_getDescriptorSize(self)

    def checkDetectorSize(self):
        return _hog.HOGDescriptor_checkDetectorSize(self)

    def getWinSigma(self):
        return _hog.HOGDescriptor_getWinSigma(self)

    def read(self, fn):
        return _hog.HOGDescriptor_read(self, fn)

    def write(self, fs, objname):
        return _hog.HOGDescriptor_write(self, fs, objname)

    def load(self, *args):
        return _hog.HOGDescriptor_load(self, *args)

    def save(self, *args):
        return _hog.HOGDescriptor_save(self, *args)

    def copyTo(self, c):
        return _hog.HOGDescriptor_copyTo(self, c)

    def compute(self, *args):
        return _hog.HOGDescriptor_compute(self, *args)

    def detect(self, *args):
        return _hog.HOGDescriptor_detect(self, *args)

    def detectMultiScale(self, *args):
        return _hog.HOGDescriptor_detectMultiScale(self, *args)

    def computeGradient(self, *args):
        return _hog.HOGDescriptor_computeGradient(self, *args)
    __swig_setmethods__["winSize"] = _hog.HOGDescriptor_winSize_set
    __swig_getmethods__["winSize"] = _hog.HOGDescriptor_winSize_get
    if _newclass:
        winSize = _swig_property(_hog.HOGDescriptor_winSize_get, _hog.HOGDescriptor_winSize_set)
    __swig_setmethods__["blockSize"] = _hog.HOGDescriptor_blockSize_set
    __swig_getmethods__["blockSize"] = _hog.HOGDescriptor_blockSize_get
    if _newclass:
        blockSize = _swig_property(_hog.HOGDescriptor_blockSize_get, _hog.HOGDescriptor_blockSize_set)
    __swig_setmethods__["blockStride"] = _hog.HOGDescriptor_blockStride_set
    __swig_getmethods__["blockStride"] = _hog.HOGDescriptor_blockStride_get
    if _newclass:
        blockStride = _swig_property(_hog.HOGDescriptor_blockStride_get, _hog.HOGDescriptor_blockStride_set)
    __swig_setmethods__["cellSize"] = _hog.HOGDescriptor_cellSize_set
    __swig_getmethods__["cellSize"] = _hog.HOGDescriptor_cellSize_get
    if _newclass:
        cellSize = _swig_property(_hog.HOGDescriptor_cellSize_get, _hog.HOGDescriptor_cellSize_set)
    __swig_setmethods__["nbins"] = _hog.HOGDescriptor_nbins_set
    __swig_getmethods__["nbins"] = _hog.HOGDescriptor_nbins_get
    if _newclass:
        nbins = _swig_property(_hog.HOGDescriptor_nbins_get, _hog.HOGDescriptor_nbins_set)
    __swig_setmethods__["derivAperture"] = _hog.HOGDescriptor_derivAperture_set
    __swig_getmethods__["derivAperture"] = _hog.HOGDescriptor_derivAperture_get
    if _newclass:
        derivAperture = _swig_property(_hog.HOGDescriptor_derivAperture_get, _hog.HOGDescriptor_derivAperture_set)
    __swig_setmethods__["winSigma"] = _hog.HOGDescriptor_winSigma_set
    __swig_getmethods__["winSigma"] = _hog.HOGDescriptor_winSigma_get
    if _newclass:
        winSigma = _swig_property(_hog.HOGDescriptor_winSigma_get, _hog.HOGDescriptor_winSigma_set)
    __swig_setmethods__["histogramNormType"] = _hog.HOGDescriptor_histogramNormType_set
    __swig_getmethods__["histogramNormType"] = _hog.HOGDescriptor_histogramNormType_get
    if _newclass:
        histogramNormType = _swig_property(_hog.HOGDescriptor_histogramNormType_get, _hog.HOGDescriptor_histogramNormType_set)
    __swig_setmethods__["L2HysThreshold"] = _hog.HOGDescriptor_L2HysThreshold_set
    __swig_getmethods__["L2HysThreshold"] = _hog.HOGDescriptor_L2HysThreshold_get
    if _newclass:
        L2HysThreshold = _swig_property(_hog.HOGDescriptor_L2HysThreshold_get, _hog.HOGDescriptor_L2HysThreshold_set)
    __swig_setmethods__["gammaCorrection"] = _hog.HOGDescriptor_gammaCorrection_set
    __swig_getmethods__["gammaCorrection"] = _hog.HOGDescriptor_gammaCorrection_get
    if _newclass:
        gammaCorrection = _swig_property(_hog.HOGDescriptor_gammaCorrection_get, _hog.HOGDescriptor_gammaCorrection_set)
    __swig_setmethods__["svmDetector"] = _hog.HOGDescriptor_svmDetector_set
    __swig_getmethods__["svmDetector"] = _hog.HOGDescriptor_svmDetector_get
    if _newclass:
        svmDetector = _swig_property(_hog.HOGDescriptor_svmDetector_get, _hog.HOGDescriptor_svmDetector_set)
    __swig_setmethods__["nlevels"] = _hog.HOGDescriptor_nlevels_set
    __swig_getmethods__["nlevels"] = _hog.HOGDescriptor_nlevels_get
    if _newclass:
        nlevels = _swig_property(_hog.HOGDescriptor_nlevels_get, _hog.HOGDescriptor_nlevels_set)

    def groupRectangles(self, rectList, weights, groupThreshold, eps):
        return _hog.HOGDescriptor_groupRectangles(self, rectList, weights, groupThreshold, eps)
HOGDescriptor_swigregister = _hog.HOGDescriptor_swigregister
HOGDescriptor_swigregister(HOGDescriptor)

class BlockData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hog.new_BlockData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["histOfs"] = _hog.BlockData_histOfs_set
    __swig_getmethods__["histOfs"] = _hog.BlockData_histOfs_get
    if _newclass:
        histOfs = _swig_property(_hog.BlockData_histOfs_get, _hog.BlockData_histOfs_set)
    __swig_setmethods__["imgOffset"] = _hog.BlockData_imgOffset_set
    __swig_getmethods__["imgOffset"] = _hog.BlockData_imgOffset_get
    if _newclass:
        imgOffset = _swig_property(_hog.BlockData_imgOffset_get, _hog.BlockData_imgOffset_set)
    __swig_destroy__ = _hog.delete_BlockData
    __del__ = lambda self: None
BlockData_swigregister = _hog.BlockData_swigregister
BlockData_swigregister(BlockData)

class PixData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gradOfs"] = _hog.PixData_gradOfs_set
    __swig_getmethods__["gradOfs"] = _hog.PixData_gradOfs_get
    if _newclass:
        gradOfs = _swig_property(_hog.PixData_gradOfs_get, _hog.PixData_gradOfs_set)
    __swig_setmethods__["qangleOfs"] = _hog.PixData_qangleOfs_set
    __swig_getmethods__["qangleOfs"] = _hog.PixData_qangleOfs_get
    if _newclass:
        qangleOfs = _swig_property(_hog.PixData_qangleOfs_get, _hog.PixData_qangleOfs_set)
    __swig_setmethods__["histOfs"] = _hog.PixData_histOfs_set
    __swig_getmethods__["histOfs"] = _hog.PixData_histOfs_get
    if _newclass:
        histOfs = _swig_property(_hog.PixData_histOfs_get, _hog.PixData_histOfs_set)
    __swig_setmethods__["histWeights"] = _hog.PixData_histWeights_set
    __swig_getmethods__["histWeights"] = _hog.PixData_histWeights_get
    if _newclass:
        histWeights = _swig_property(_hog.PixData_histWeights_get, _hog.PixData_histWeights_set)
    __swig_setmethods__["gradWeight"] = _hog.PixData_gradWeight_set
    __swig_getmethods__["gradWeight"] = _hog.PixData_gradWeight_get
    if _newclass:
        gradWeight = _swig_property(_hog.PixData_gradWeight_get, _hog.PixData_gradWeight_set)

    def __init__(self):
        this = _hog.new_PixData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_PixData
    __del__ = lambda self: None
PixData_swigregister = _hog.PixData_swigregister
PixData_swigregister(PixData)

class HOGCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HOGCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HOGCache, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hog.new_HOGCache(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hog.delete_HOGCache
    __del__ = lambda self: None

    def computeGradient(self, img, paddingTL, paddingBR):
        return _hog.HOGCache_computeGradient(self, img, paddingTL, paddingBR)

    def init(self, descriptor, imgsize_no_padding, paddingTL, paddingBR, useCache, cacheStride):
        return _hog.HOGCache_init(self, descriptor, imgsize_no_padding, paddingTL, paddingBR, useCache, cacheStride)

    def windowsInImage(self, imageSize, winStride):
        return _hog.HOGCache_windowsInImage(self, imageSize, winStride)

    def getWindow(self, imageSize, winStride, idx):
        return _hog.HOGCache_getWindow(self, imageSize, winStride, idx)

    def getBlock(self, pt, buf):
        return _hog.HOGCache_getBlock(self, pt, buf)

    def normalizeBlockHistogram(self, histogram):
        return _hog.HOGCache_normalizeBlockHistogram(self, histogram)
    __swig_setmethods__["pixData"] = _hog.HOGCache_pixData_set
    __swig_getmethods__["pixData"] = _hog.HOGCache_pixData_get
    if _newclass:
        pixData = _swig_property(_hog.HOGCache_pixData_get, _hog.HOGCache_pixData_set)
    __swig_setmethods__["blockData"] = _hog.HOGCache_blockData_set
    __swig_getmethods__["blockData"] = _hog.HOGCache_blockData_get
    if _newclass:
        blockData = _swig_property(_hog.HOGCache_blockData_get, _hog.HOGCache_blockData_set)
    __swig_setmethods__["useCache"] = _hog.HOGCache_useCache_set
    __swig_getmethods__["useCache"] = _hog.HOGCache_useCache_get
    if _newclass:
        useCache = _swig_property(_hog.HOGCache_useCache_get, _hog.HOGCache_useCache_set)
    __swig_setmethods__["ymaxCached"] = _hog.HOGCache_ymaxCached_set
    __swig_getmethods__["ymaxCached"] = _hog.HOGCache_ymaxCached_get
    if _newclass:
        ymaxCached = _swig_property(_hog.HOGCache_ymaxCached_get, _hog.HOGCache_ymaxCached_set)
    __swig_setmethods__["winSize"] = _hog.HOGCache_winSize_set
    __swig_getmethods__["winSize"] = _hog.HOGCache_winSize_get
    if _newclass:
        winSize = _swig_property(_hog.HOGCache_winSize_get, _hog.HOGCache_winSize_set)
    __swig_setmethods__["cacheStride"] = _hog.HOGCache_cacheStride_set
    __swig_getmethods__["cacheStride"] = _hog.HOGCache_cacheStride_get
    if _newclass:
        cacheStride = _swig_property(_hog.HOGCache_cacheStride_get, _hog.HOGCache_cacheStride_set)
    __swig_setmethods__["nblocks"] = _hog.HOGCache_nblocks_set
    __swig_getmethods__["nblocks"] = _hog.HOGCache_nblocks_get
    if _newclass:
        nblocks = _swig_property(_hog.HOGCache_nblocks_get, _hog.HOGCache_nblocks_set)
    __swig_setmethods__["ncells"] = _hog.HOGCache_ncells_set
    __swig_getmethods__["ncells"] = _hog.HOGCache_ncells_get
    if _newclass:
        ncells = _swig_property(_hog.HOGCache_ncells_get, _hog.HOGCache_ncells_set)
    __swig_setmethods__["blockHistogramSize"] = _hog.HOGCache_blockHistogramSize_set
    __swig_getmethods__["blockHistogramSize"] = _hog.HOGCache_blockHistogramSize_get
    if _newclass:
        blockHistogramSize = _swig_property(_hog.HOGCache_blockHistogramSize_get, _hog.HOGCache_blockHistogramSize_set)
    __swig_setmethods__["count1"] = _hog.HOGCache_count1_set
    __swig_getmethods__["count1"] = _hog.HOGCache_count1_get
    if _newclass:
        count1 = _swig_property(_hog.HOGCache_count1_get, _hog.HOGCache_count1_set)
    __swig_setmethods__["count2"] = _hog.HOGCache_count2_set
    __swig_getmethods__["count2"] = _hog.HOGCache_count2_get
    if _newclass:
        count2 = _swig_property(_hog.HOGCache_count2_get, _hog.HOGCache_count2_set)
    __swig_setmethods__["count4"] = _hog.HOGCache_count4_set
    __swig_getmethods__["count4"] = _hog.HOGCache_count4_get
    if _newclass:
        count4 = _swig_property(_hog.HOGCache_count4_get, _hog.HOGCache_count4_set)
    __swig_setmethods__["imgoffset"] = _hog.HOGCache_imgoffset_set
    __swig_getmethods__["imgoffset"] = _hog.HOGCache_imgoffset_get
    if _newclass:
        imgoffset = _swig_property(_hog.HOGCache_imgoffset_get, _hog.HOGCache_imgoffset_set)
    __swig_setmethods__["blockCache"] = _hog.HOGCache_blockCache_set
    __swig_getmethods__["blockCache"] = _hog.HOGCache_blockCache_get
    if _newclass:
        blockCache = _swig_property(_hog.HOGCache_blockCache_get, _hog.HOGCache_blockCache_set)
    __swig_setmethods__["blockCacheFlags"] = _hog.HOGCache_blockCacheFlags_set
    __swig_getmethods__["blockCacheFlags"] = _hog.HOGCache_blockCacheFlags_get
    if _newclass:
        blockCacheFlags = _swig_property(_hog.HOGCache_blockCacheFlags_get, _hog.HOGCache_blockCacheFlags_set)
    __swig_setmethods__["grad"] = _hog.HOGCache_grad_set
    __swig_getmethods__["grad"] = _hog.HOGCache_grad_get
    if _newclass:
        grad = _swig_property(_hog.HOGCache_grad_get, _hog.HOGCache_grad_set)
    __swig_setmethods__["qangle"] = _hog.HOGCache_qangle_set
    __swig_getmethods__["qangle"] = _hog.HOGCache_qangle_get
    if _newclass:
        qangle = _swig_property(_hog.HOGCache_qangle_get, _hog.HOGCache_qangle_set)
    __swig_setmethods__["paddedSize"] = _hog.HOGCache_paddedSize_set
    __swig_getmethods__["paddedSize"] = _hog.HOGCache_paddedSize_get
    if _newclass:
        paddedSize = _swig_property(_hog.HOGCache_paddedSize_get, _hog.HOGCache_paddedSize_set)
    __swig_setmethods__["descriptor"] = _hog.HOGCache_descriptor_set
    __swig_getmethods__["descriptor"] = _hog.HOGCache_descriptor_get
    if _newclass:
        descriptor = _swig_property(_hog.HOGCache_descriptor_get, _hog.HOGCache_descriptor_set)
HOGCache_swigregister = _hog.HOGCache_swigregister
HOGCache_swigregister(HOGCache)

# This file is compatible with both classic and new-style classes.


